{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"isOpen\",\"onClose\",\"defaultIsOpen\",\"initialFocusRef\",\"finalFocusRef\",\"avoidKeyboard\",\"closeOnOverlayClick\",\"isKeyboardDismissable\",\"overlayVisible\",\"backdropVisible\",\"animationPreset\"],_excluded2=[\"contentSize\",\"_backdrop\",\"_backdropFade\",\"_fade\",\"_slide\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Backdrop from\"../Backdrop\";import{Slide}from\"../Transitions\";import{FocusScope}from'@react-native-aria/focus';import{useControllableState,usePropsResolution}from\"../../../hooks\";import{AlertDialogContext}from\"./Context\";import Box from\"../../primitives/Box\";import{Fade}from\"../Transitions\";import{useKeyboardBottomInset}from\"../../../utils\";import{Overlay}from\"../../primitives/Overlay\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var AlertDialog=function AlertDialog(_ref,ref){var children=_ref.children,isOpen=_ref.isOpen,onClose=_ref.onClose,defaultIsOpen=_ref.defaultIsOpen,initialFocusRef=_ref.initialFocusRef,finalFocusRef=_ref.finalFocusRef,avoidKeyboard=_ref.avoidKeyboard,_ref$closeOnOverlayCl=_ref.closeOnOverlayClick,closeOnOverlayClick=_ref$closeOnOverlayCl===void 0?false:_ref$closeOnOverlayCl,_ref$isKeyboardDismis=_ref.isKeyboardDismissable,isKeyboardDismissable=_ref$isKeyboardDismis===void 0?true:_ref$isKeyboardDismis,_ref$overlayVisible=_ref.overlayVisible,overlayVisible=_ref$overlayVisible===void 0?true:_ref$overlayVisible,_ref$backdropVisible=_ref.backdropVisible,backdropVisible=_ref$backdropVisible===void 0?true:_ref$backdropVisible,animationPreset=_ref.animationPreset,rest=_objectWithoutProperties(_ref,_excluded);var bottomInset=useKeyboardBottomInset();var _usePropsResolution=usePropsResolution('AlertDialog',rest),contentSize=_usePropsResolution.contentSize,_backdrop=_usePropsResolution._backdrop,_backdropFade=_usePropsResolution._backdropFade,_fade=_usePropsResolution._fade,_slide=_usePropsResolution._slide,restThemeProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var _useControllableState=useControllableState({value:isOpen,defaultValue:defaultIsOpen,onChange:function onChange(val){if(!val)onClose&&onClose();}}),_useControllableState2=_slicedToArray(_useControllableState,2),visible=_useControllableState2[0],setVisible=_useControllableState2[1];var handleClose=function handleClose(){return setVisible(false);};var child=React.createElement(Box,_extends({bottom:avoidKeyboard?bottomInset+'px':undefined},restThemeProps,{ref:ref}),children);if(useHasResponsiveProps(rest)){return null;}return React.createElement(Overlay,{isOpen:visible,onRequestClose:handleClose,isKeyboardDismissable:isKeyboardDismissable,useRNModalOnAndroid:true,unmountOnExit:true},React.createElement(AlertDialogContext.Provider,{value:{handleClose:handleClose,contentSize:contentSize,initialFocusRef:initialFocusRef,finalFocusRef:finalFocusRef}},React.createElement(Fade,_extends({in:visible,style:StyleSheet.absoluteFill},_backdropFade),overlayVisible&&backdropVisible&&React.createElement(Backdrop,_extends({onPress:function onPress(){closeOnOverlayClick&&handleClose();}},_backdrop))),animationPreset==='slide'?React.createElement(Slide,_extends({in:visible},_slide),React.createElement(FocusScope,{contain:visible,autoFocus:visible&&!initialFocusRef,restoreFocus:visible&&!finalFocusRef},child)):React.createElement(Fade,_extends({in:visible,style:StyleSheet.absoluteFill},_fade),React.createElement(FocusScope,{contain:visible,autoFocus:visible&&!initialFocusRef,restoreFocus:visible&&!finalFocusRef},child))));};export default memo(forwardRef(AlertDialog));","map":{"version":3,"sources":["AlertDialog.tsx"],"names":["AlertDialog","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","rest","bottomInset","useKeyboardBottomInset","restThemeProps","usePropsResolution","useControllableState","value","defaultValue","onChange","val","onClose","handleClose","setVisible","child","avoidKeyboard","undefined","ref","useHasResponsiveProps","contentSize","initialFocusRef","finalFocusRef","StyleSheet","absoluteFill","visible","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IAlertDialogProps } from './types';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialog = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IAlertDialogProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    ...restThemeProps\n  } = usePropsResolution('AlertDialog', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = () => setVisible(false);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...restThemeProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      useRNModalOnAndroid\n      unmountOnExit\n    >\n      <AlertDialogContext.Provider\n        value={{\n          handleClose,\n          contentSize,\n          initialFocusRef,\n          finalFocusRef,\n        }}\n      >\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </AlertDialogContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(AlertDialog));\n"]},"metadata":{},"sourceType":"module"}