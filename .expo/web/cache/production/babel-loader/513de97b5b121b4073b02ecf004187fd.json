{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{OverlayContainer}from'@react-native-aria/overlays';import React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import Modal from\"react-native-web/dist/exports/Modal\";import{useKeyboardDismissable}from\"../../../hooks\";import{ExitAnimationContext}from\"./ExitAnimationContext\";export function Overlay(_ref){var children=_ref.children,isOpen=_ref.isOpen,_ref$useRNModalOnAndr=_ref.useRNModalOnAndroid,useRNModalOnAndroid=_ref$useRNModalOnAndr===void 0?false:_ref$useRNModalOnAndr,_ref$isKeyboardDismis=_ref.isKeyboardDismissable,isKeyboardDismissable=_ref$isKeyboardDismis===void 0?true:_ref$isKeyboardDismis,_ref$animationPreset=_ref.animationPreset,animationPreset=_ref$animationPreset===void 0?'fade':_ref$animationPreset,onRequestClose=_ref.onRequestClose,style=_ref.style,unmountOnExit=_ref.unmountOnExit;var _React$useState=React.useState(!isOpen),_React$useState2=_slicedToArray(_React$useState,2),exited=_React$useState2[0],setExited=_React$useState2[1];useKeyboardDismissable({enabled:isOpen&&isKeyboardDismissable,callback:onRequestClose?onRequestClose:function(){}});var styleObj=_objectSpread({},style);if(animationPreset==='slide'){styleObj.overflow='hidden';styleObj.display='flex';}else{styleObj.display=exited&&!isOpen?'none':'flex';}if(unmountOnExit&&!isOpen&&exited){return null;}if(Platform.OS==='android'&&useRNModalOnAndroid){return React.createElement(ExitAnimationContext.Provider,{value:{exited:exited,setExited:setExited}},React.createElement(Modal,{transparent:true,visible:isOpen,onRequestClose:onRequestClose,animationType:animationPreset},children));}return React.createElement(OverlayContainer,{style:_objectSpread({},styleObj)},React.createElement(ExitAnimationContext.Provider,{value:{exited:exited,setExited:setExited}},children));}","map":{"version":3,"sources":["Overlay.tsx"],"names":["useRNModalOnAndroid","isKeyboardDismissable","animationPreset","unmountOnExit","React","useKeyboardDismissable","enabled","isOpen","callback","onRequestClose","styleObj","style","exited","Platform","setExited"],"mappings":"y4BACA,OAAA,gBAAA,KAAA,6BAAA,CACA,MAAA,CAAA,KAAA,KAAA,OAAA,C,oHAGA,OAAA,sBAAA,sBACA,OAAA,oBAAA,8BAcA,MAAO,SAAA,CAAA,OAAA,MAUW,IAVM,CAAA,QAUN,MAVM,QAUN,CAVM,MAUN,MAVM,MAUN,4BAPhBA,mBAOgB,CAPhBA,mBAOgB,gCAVM,KAUN,kDANhBC,qBAMgB,CANhBA,qBAMgB,gCAVM,IAUN,iDAJhBC,eAIgB,CAJhBA,eAIgB,+BAVM,MAUN,sBAVM,cAUN,MAVM,cAUN,CAVM,KAUN,MAVM,KAUN,CADhBC,aACgB,MADhBA,aACgB,CAChB,oBAA4BC,KAAK,CAALA,QAAAA,CAAe,CAA3C,MAA4BA,CAA5B,oDAAM,MAAN,qBAAM,SAAN,qBAEAC,sBAAsB,CAAC,CACrBC,OAAO,CAAEC,MAAM,EADM,qBAAA,CAErBC,QAAQ,CAAEC,cAAc,CAAA,cAAA,CAAoB,UAAM,CAAE,CAF/B,CAAD,CAAtBJ,CAIA,GAAMK,CAAAA,QAAQ,kBAAQC,KAAR,CAAd,CACA,GAAIT,eAAe,GAAnB,OAAA,CAAiC,CAC/BQ,QAAQ,CAARA,QAAAA,CAAAA,QAAAA,CACAA,QAAQ,CAARA,OAAAA,CAAAA,MAAAA,CAFF,CAAA,IAGO,CACLA,QAAQ,CAARA,OAAAA,CAAmBE,MAAM,EAAI,CAAVA,MAAAA,CAAAA,MAAAA,CAAnBF,MAAAA,CACD,CAED,GAAIP,aAAa,EAAI,CAAjBA,MAAAA,EAAJ,MAAA,CAAwC,CACtC,MAAA,KAAA,CACD,CAED,GAAIU,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,EAAJ,mBAAA,CAAsD,CACpD,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,CAAA,CAA+B,KAAK,CAAE,CAAED,MAAF,CAAEA,MAAF,CAAUE,SAAAA,CAAAA,SAAV,CAAtC,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,CACE,WAAW,CADb,IAAA,CAEE,OAAO,CAFT,MAAA,CAGE,cAAc,CAHhB,cAAA,CAIE,aAAa,CAAEZ,eAJjB,CAAA,CAFJ,QAEI,CADF,CADF,CAYD,CAED,MAEE,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,CAAkB,KAAK,kBAAOQ,QAAP,CAAvB,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,CAAA,CAA+B,KAAK,CAAE,CAAEE,MAAF,CAAEA,MAAF,CAAUE,SAAAA,CAAAA,SAAV,CAAtC,CAAA,CADF,QACE,CADF,CAFF,CAQD","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform, ViewStyle } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  onRequestClose?: (() => any) | undefined;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}