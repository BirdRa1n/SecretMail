{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{useEffect as $cKEhs$useEffect}from\"react\";import{useToggle as $cKEhs$useToggle}from\"@react-aria/toggle\";import{filterDOMProps as $cKEhs$filterDOMProps,mergeProps as $cKEhs$mergeProps}from\"@react-aria/utils\";import{useLabel as $cKEhs$useLabel}from\"@react-aria/label\";import{useToggleState as $cKEhs$useToggleState}from\"@react-stately/toggle\";function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:true,configurable:true});}var $406796ff087fe49b$exports={};$parcel$export($406796ff087fe49b$exports,\"useCheckbox\",function(){return $406796ff087fe49b$export$e375f10ce42261c5;});function $406796ff087fe49b$export$e375f10ce42261c5(props,state,inputRef){var _$cKEhs$useToggle=$cKEhs$useToggle(props,state,inputRef),inputProps=_$cKEhs$useToggle.inputProps;var isSelected=state.isSelected;var isIndeterminate=props.isIndeterminate;$cKEhs$useEffect(function(){if(inputRef.current)inputRef.current.indeterminate=isIndeterminate;});return{inputProps:_objectSpread(_objectSpread({},inputProps),{},{checked:isSelected,'aria-checked':isIndeterminate?'mixed':isSelected})};}var $1e9fce0cfacc738b$exports={};$parcel$export($1e9fce0cfacc738b$exports,\"useCheckboxGroup\",function(){return $1e9fce0cfacc738b$export$49ff6f28c54f1cbe;});var $1ae600c947479353$export$31440636951aa68c=new WeakMap();function $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props,state){var isDisabled=props.isDisabled,name=props.name;var _$cKEhs$useLabel=$cKEhs$useLabel(_objectSpread(_objectSpread({},props),{},{labelElementType:'span'})),labelProps=_$cKEhs$useLabel.labelProps,fieldProps=_$cKEhs$useLabel.fieldProps;var domProps=$cKEhs$filterDOMProps(props,{labelable:true});$1ae600c947479353$export$31440636951aa68c.set(state,name);return{groupProps:$cKEhs$mergeProps(domProps,_objectSpread({role:'group','aria-disabled':isDisabled||undefined},fieldProps)),labelProps:labelProps};}var $fba3e38d5ca8983f$exports={};$parcel$export($fba3e38d5ca8983f$exports,\"useCheckboxGroupItem\",function(){return $fba3e38d5ca8983f$export$353b32fc6898d37d;});function $fba3e38d5ca8983f$export$353b32fc6898d37d(props,state,inputRef){var toggleState=$cKEhs$useToggleState({isReadOnly:props.isReadOnly||state.isReadOnly,isSelected:state.isSelected(props.value),onChange:function onChange(isSelected){if(isSelected)state.addValue(props.value);else state.removeValue(props.value);if(props.onChange)props.onChange(isSelected);}});var _$406796ff087fe49b$ex=$406796ff087fe49b$export$e375f10ce42261c5(_objectSpread(_objectSpread({},props),{},{isReadOnly:props.isReadOnly||state.isReadOnly,isDisabled:props.isDisabled||state.isDisabled,name:props.name||$1ae600c947479353$export$31440636951aa68c.get(state)}),toggleState,inputRef),inputProps=_$406796ff087fe49b$ex.inputProps;return{inputProps:inputProps};}export{$406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox,$1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup,$fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem};","map":{"version":3,"sources":["packages/@react-aria/checkbox/src/useCheckbox.ts","packages/@react-aria/checkbox/src/useCheckboxGroup.ts","packages/@react-aria/checkbox/src/utils.ts","packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"names":[],"mappings":"g7CA8BgB,CAAA,yC,CAAY,K,CAA0B,K,CAAoB,Q,CAAqD,CAC7H,sBAAmB,gBAAS,CAAC,KAAD,CAAQ,KAAR,CAAe,QAAf,CAA5B,CAAK,UAAL,mBAAK,UAAL,CACA,GAAK,CAAA,UAAL,CAAmB,KAAnB,CAAK,UAAL,CAEA,GAAK,CAAA,eAAL,CAAwB,KAAxB,CAAK,eAAL,CACA,gBAAS,CAAA,UAAO,CAGd,GAAI,QAAQ,CAAC,OAAb,CACE,QAAQ,CAAC,OAAT,CAAiB,aAAjB,CAAiC,eAAjC,CAEH,CANQ,CAAT,CAQA,MAAO,CACL,UAAU,gCACL,UADK,MAER,OAAO,CAAE,UAFD,CAGR,eAAgB,eAAe,CAAG,OAAH,CAAa,UAHpC,EADL,CAAP,CAOD,C,4JEpCM,GAAM,CAAA,yCAAkB,CAAG,GAAI,CAAA,OAAJ,EAA3B,C,QDkBS,CAAA,yC,CAAiB,K,CAA+B,K,CAA8C,CAC5G,GAAK,CAAA,UAAL,CAAyB,KAAzB,CAAK,UAAL,CAAiB,IAAjB,CAAyB,KAAzB,CAAe,IAAf,CAEA,qBAA+B,eAAQ,gCAClC,KADkC,MAIrC,gBAAgB,CAAE,MAJmB,GAAvC,CAAK,UAAL,kBAAK,UAAL,CAAiB,UAAjB,kBAAe,UAAf,CAOA,GAAI,CAAA,QAAQ,CAAG,qBAAc,CAAC,KAAD,CAAQ,CAAC,SAAS,CAAE,IAAZ,CAAR,CAA7B,CAGA,yCAAkB,CAAC,GAAnB,CAAuB,KAAvB,CAA8B,IAA9B,EAEA,MAAO,CACL,UAAU,CAAE,iBAAU,CAAC,QAAD,gBACpB,IAAI,CAAE,OADc,CAEpB,gBAAiB,UAAU,EAAI,SAFX,EAGjB,UAHiB,EADjB,C,WAML,UANK,CAAP,CAQD,C,wKE7Be,CAAA,yC,CAAqB,K,CAAmC,K,CAA2B,Q,CAAqD,CACtJ,GAAM,CAAA,WAAW,CAAG,qBAAc,CAAC,CACjC,UAAU,CAAE,KAAK,CAAC,UAAN,EAAoB,KAAK,CAAC,UADL,CAEjC,UAAU,CAAE,KAAK,CAAC,UAAN,CAAiB,KAAK,CAAC,KAAvB,CAFqB,CAGjC,QAHiC,mBAGxB,UAHwB,CAGZ,CACnB,GAAI,UAAJ,CACE,KAAK,CAAC,QAAN,CAAe,KAAK,CAAC,KAArB,EADF,IAGE,CAAA,KAAK,CAAC,WAAN,CAAkB,KAAK,CAAC,KAAxB,EAGF,GAAI,KAAK,CAAC,QAAV,CACE,KAAK,CAAC,QAAN,CAAe,UAAf,EAEH,CAbgC,CAAD,CAAlC,CAgBA,0BAAmB,yCAAW,gCACzB,KADyB,MAE5B,UAAU,CAAE,KAAK,CAAC,UAAN,EAAoB,KAAK,CAAC,UAFV,CAG5B,UAAU,CAAE,KAAK,CAAC,UAAN,EAAoB,KAAK,CAAC,UAHV,CAI5B,IAAI,CAAE,KAAK,CAAC,IAAN,EAAc,yCAAkB,CAAC,GAAnB,CAAuB,KAAvB,CAJQ,GAK3B,WAL2B,CAKd,QALc,CAA9B,CAAK,UAAL,uBAAK,UAAL,CAOA,MAAO,C,WAAC,UAAD,CAAP,CACD,C","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\n\ninterface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"]},"metadata":{},"sourceType":"module"}