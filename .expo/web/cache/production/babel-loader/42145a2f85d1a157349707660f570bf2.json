{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"],_excluded2=[\"_image\",\"_badgeSize\",\"source\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Box,Image}from\"../../primitives\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Avatar=function Avatar(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),error=_React$useState2[0],setError=_React$useState2[1];var _usePropsResolution=usePropsResolution('Avatar',props),_image=_usePropsResolution._image,_badgeSize=_usePropsResolution._badgeSize,source=_usePropsResolution.source,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var Badge=React.createElement(React.Fragment,null);var remainingChildren=[];React.Children.map(children,function(child){if(typeof(child===null||child===void 0?void 0:child.type)==='object'&&(child===null||child===void 0?void 0:child.type.displayName)==='AvatarBadge'){Badge=React.cloneElement(child,{size:_badgeSize[0]});}else{remainingChildren.push(child);}});if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,resolvedProps,!!(source!==null&&source!==void 0&&source.uri)&&!error?React.createElement(Image,_extends({source:source,onError:function onError(){setError(true);}},_image,{ref:ref})):remainingChildren.length!==0&&remainingChildren,Badge);};export default memo(forwardRef(Avatar));","map":{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","props","React","resolvedProps","usePropsResolution","Badge","remainingChildren","child","size","_badgeSize","useHasResponsiveProps","source","setError","ref","memo","forwardRef"],"mappings":"ofAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,GAAA,CAAA,KAAA,wBACA,OAAA,kBAAA,oCAEA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAA,GAAA,CAAoD,IAAnD,CAAA,QAAmD,MAAnD,QAAmD,CAApCC,KAAoC,0CACjE,oBAA0BC,KAAK,CAALA,QAAAA,CAA1B,KAA0BA,CAA1B,oDAAM,KAAN,qBAAM,QAAN,qBACA,wBAAyDE,kBAAkB,CAAA,QAAA,CAA3E,KAA2E,CAA3E,CAAM,MAAN,qBAAM,MAAN,CAAM,UAAN,qBAAM,UAAN,CAAM,MAAN,qBAAM,MAAN,CAAuCD,aAAvC,0DAKA,GAAIE,CAAAA,KAAK,CAAG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAZ,IAAY,CAAZ,CACA,GAAMC,CAAAA,iBAAgC,CAR2B,EAQjE,CAEAJ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,CAA8BK,SAAAA,KAAD,CAAW,CACtC,GACE,OAAOA,KAAP,GAAA,IAAOA,EAAAA,KAAP,GAAA,IAAA,EAAOA,CAAP,IAAA,EAAOA,CAAAA,KAAK,CAAZ,IAAA,IAAA,QAAA,EACA,CAAA,KAAK,GAAL,IAAA,EAAA,KAAK,GAAA,IAAL,EAAA,CAAA,IAAA,EAAA,CAAA,KAAK,CAAL,IAAA,CAAA,WAAA,IAFF,aAAA,CAGE,CACAF,KAAK,CAAG,KAAK,CAAL,YAAA,CAAA,KAAA,CAA0B,CAAEG,IAAI,CAAEC,UAAU,CAAA,CAAA,CAAlB,CAA1B,CAARJ,CAJF,CAAA,IAKO,CACLC,iBAAiB,CAAjBA,IAAAA,CAAAA,KAAAA,EACD,CAlB8D,CAUjEJ,EAYA,GAAIQ,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,aAAA,CACG,CAAC,EAACC,MAAD,GAAA,IAACA,EAAAA,MAAD,GAAA,IAAA,EAACA,EAAAA,MAAM,CAAR,GAAC,CAAD,EAAiB,CAAjB,KAAA,CACC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CACE,MAAM,CADR,MAAA,CAEE,OAAO,CAAE,kBAAM,CACbC,QAAQ,CAARA,IAAQ,CAARA,CACD,CAJH,CAAA,CAAA,MAAA,CAAA,CAME,GAAG,CAAEC,GANP,CAAA,CAAA,CADD,CAUCP,iBAAiB,CAAjBA,MAAAA,GAAAA,CAAAA,EAXJ,iBAAA,CADF,KACE,CADF,CA1BF,CAAA,CA6CA,cAAeQ,CAAAA,IAAI,CAACC,UAAU,CAA9B,MAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _image, _badgeSize, source, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = React.cloneElement(child, { size: _badgeSize[0] });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps}>\n      {!!source?.uri && !error ? (\n        <Image\n          source={source}\n          onError={() => {\n            setError(true);\n          }}\n          {..._image}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]},"metadata":{},"sourceType":"module"}