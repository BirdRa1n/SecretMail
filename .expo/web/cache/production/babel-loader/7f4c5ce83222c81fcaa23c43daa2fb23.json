{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"as\"],_excluded2=[\"size\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{useToken,usePropsResolution}from\"../../../hooks\";import SVGIcon from\"./SVGIcon\";import{Factory}from\"../../../factory\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Icon=function Icon(_ref,ref){var as=_ref.as,props=_objectWithoutProperties(_ref,_excluded);var _usePropsResolution=usePropsResolution('Icon',props),size=_usePropsResolution.size,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var tokenizedFontSize=useToken('space',size);if(useHasResponsiveProps(props)){return null;}if(!as){return React.createElement(SVGIcon,_extends({size:size},resolvedProps,{ref:ref}));}var isJSX=React.isValidElement(as);var StyledAs=Factory(isJSX?function(resolvedProps){return React.cloneElement(as,_objectSpread(_objectSpread({},resolvedProps),as.props));}:as);return React.createElement(StyledAs,_extends({},resolvedProps,{fontSize:tokenizedFontSize,lineHeight:tokenizedFontSize,size:size,ref:ref}));};export default memo(forwardRef(Icon));","map":{"version":3,"sources":["Icon.tsx"],"names":["Icon","props","resolvedProps","usePropsResolution","tokenizedFontSize","useToken","useHasResponsiveProps","size","ref","isJSX","React","StyledAs","Factory","as","memo","forwardRef"],"mappings":"6tCAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,QAAA,CAAA,kBAAA,sBAEA,MAAA,CAAA,OAAA,iBACA,OAAA,OAAA,wBACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAAA,GAAA,CAA6C,IAA5C,CAAA,EAA4C,MAA5C,EAA4C,CAAnCC,KAAmC,0CACxD,wBAAmCE,kBAAkB,CAAA,MAAA,CAArD,KAAqD,CAArD,CAAM,IAAN,qBAAM,IAAN,CAAiBD,aAAjB,0DACA,GAAME,CAAAA,iBAAiB,CAAGC,QAAQ,CAAA,OAAA,CAFsB,IAEtB,CAAlC,CAEA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,GAAI,CAAJ,EAAA,CAAS,CACP,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAS,IAAI,CAAEC,IAAf,CAAA,CAAA,aAAA,CAAA,CAAwC,GAAG,CAAEC,GAA7C,CAAA,CAAA,CAAP,CACD,CACD,GAAMC,CAAAA,KAAK,CAAGC,KAAK,CAALA,cAAAA,CAAd,EAAcA,CAAd,CACA,GAAMC,CAAAA,QAAQ,CAAGC,OAAO,CACtBH,KAAK,CACAP,SAAAA,aAAD,QACE,CAAA,KAAK,CAAL,YAAA,CAAA,EAAA,gCAAuB,aAAvB,EAGKW,EAAE,CAACZ,KAHR,EADF,EADC,CADP,EAAwB,CAAxB,CAWA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,CAEE,QAAQ,CAFV,iBAAA,CAGE,UAAU,CAHZ,iBAAA,CAIE,IAAI,CAJN,IAAA,CAKE,GAAG,CAAEO,GALP,CAAA,CAAA,CADF,CAtBF,CAAA,CAiCA,cAAeM,CAAAA,IAAI,CAACC,UAAU,CAA9B,IAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = ({ as, ...props }: IIconProps, ref?: any) => {\n  const { size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            //@ts-ignore\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]},"metadata":{},"sourceType":"module"}