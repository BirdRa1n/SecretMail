{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{useTypeaheadReducer}from\"./reducer\";import React,{useEffect}from'react';import*as stateChangeTypes from\"./types\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import{dropdownDefaultStateValues,getDefaultValue}from\"./utils\";function isControlledProp(props,key){return props[key]!==undefined;}export function useTypeahead(props){var defaultValues=_objectSpread({},dropdownDefaultStateValues);defaultValues.isOpen=getDefaultValue(props,'isOpen');var _React$useReducer=React.useReducer(useTypeaheadReducer,defaultValues),_React$useReducer2=_slicedToArray(_React$useReducer,2),state=_React$useReducer2[0],dispatch=_React$useReducer2[1];var dispatchWithProps=function dispatchWithProps(object){dispatch(_objectSpread(_objectSpread({},object),{},{props:props}));};var inputValue=state.inputValue,isOpen=state.isOpen;var items=props.items,onInputValueChange=props.onInputValueChange,onSelectedItemChange=props.onSelectedItemChange,selectedItem=props.selectedItem,itemToString=props.itemToString;var isControlled=isControlledProp(props,'selectedItem');useEffect(function(){if(isControlled){dispatch({type:stateChangeTypes.ControlledPropUpdatedSelectedItem,inputValue:itemToString(selectedItem)});}},[selectedItem,isControlled,itemToString]);var onChangeText=function onChangeText(text){onInputValueChange===null||onInputValueChange===void 0?void 0:onInputValueChange({inputValue:text});dispatchWithProps({type:stateChangeTypes.InputChange,inputValue:text});};var handleItemSelect=function handleItemSelect(item,index){onSelectedItemChange===null||onSelectedItemChange===void 0?void 0:onSelectedItemChange(item);dispatchWithProps({type:stateChangeTypes.ItemClick,index:index});Keyboard.dismiss();};var getMenuItemProps=function getMenuItemProps(item,index){return{onPress:function onPress(){return handleItemSelect(item,index);},accessible:true,accessiblityRole:'menuitem'};};var getMenuProps=function getMenuProps(){return{accessible:true,accessibilityRole:'menu',accessibilityHint:\"Showing \".concat(items.length,\" records\")};};var getToggleButtonProps=function getToggleButtonProps(){return{onPress:function onPress(){dispatchWithProps({type:stateChangeTypes.ToggleButtonClick});}};};var getInputProps=function getInputProps(propInputVal,propOnchangeText){return{onChangeText:propInputVal?propOnchangeText:onChangeText,value:propInputVal?propInputVal:inputValue,accessibilityRole:'combobox',accessibilityLabel:'Typeahead input',accessibilityState:{expanded:isOpen}};};return{getInputProps:getInputProps,getMenuItemProps:getMenuItemProps,getMenuProps:getMenuProps,getToggleButtonProps:getToggleButtonProps,isOpen:isOpen};}","map":{"version":3,"sources":["useTypeahead.ts"],"names":["props","defaultValues","dropdownDefaultStateValues","getDefaultValue","React","dispatchWithProps","object","dispatch","isOpen","itemToString","isControlled","isControlledProp","useEffect","type","stateChangeTypes","inputValue","onChangeText","text","onInputValueChange","handleItemSelect","onSelectedItemChange","index","Keyboard","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","items","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}