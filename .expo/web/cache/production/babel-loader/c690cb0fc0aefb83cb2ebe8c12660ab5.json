{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React from'react';import AccessibilityInfo from\"react-native-web/dist/exports/AccessibilityInfo\";export function useScreenReaderEnabled(){var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),enabled=_React$useState2[0],setEnabled=_React$useState2[1];var mountedRef=React.useRef(false);var handleSetEnabled=function handleSetEnabled(value){if(mountedRef.current){setEnabled(value);}};React.useEffect(function(){mountedRef.current=true;function setInitialValue(){var res;return _regeneratorRuntime.async(function setInitialValue$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(AccessibilityInfo.isScreenReaderEnabled());case 2:res=_context.sent;handleSetEnabled(res);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);}var handler=AccessibilityInfo.addEventListener('screenReaderChanged',function(event){handleSetEnabled(event);});setInitialValue();return function(){mountedRef.current=false;AccessibilityInfo.removeEventListener('screenReaderChanged',handler);};});return enabled;}","map":{"version":3,"sources":["useScreenReaderEnabled.ts"],"names":["React","mountedRef","handleSetEnabled","value","setEnabled","res","AccessibilityInfo","handler","event","setInitialValue"],"mappings":"6HAAA,MAAA,CAAA,KAAA,KAAA,OAAA,C,+EAGA,MAAO,SAAA,CAAA,sBAAA,EAAkC,CACvC,oBAA8BA,KAAK,CAALA,QAAAA,CAA9B,KAA8BA,CAA9B,oDAAM,OAAN,qBAAM,UAAN,qBACA,GAAMC,CAAAA,UAAU,CAAGD,KAAK,CAALA,MAAAA,CAAnB,KAAmBA,CAAnB,CAEA,GAAME,CAAAA,gBAAgB,CAAIC,QAApBD,CAAAA,gBAAoBC,CAAAA,KAAD,CAAoB,CAC3C,GAAIF,UAAU,CAAd,OAAA,CAAwB,CACtBG,UAAU,CAAVA,KAAU,CAAVA,CACD,CAHH,CAAA,CAMAJ,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBC,UAAU,CAAVA,OAAAA,CAAAA,IAAAA,CACA,QAAA,CAAA,eAAA,qLACoBK,iBAAiB,CAAnC,qBAAkBA,EADpB,SACQD,GADR,eAEEH,gBAAgB,CAAhBA,GAAgB,CAAhBA,CAFF,qEAKA,GAAIK,CAAAA,OAAY,CAAG,iBAAiB,CAAjB,gBAAA,CAAA,qBAAA,CAEhBC,SAAAA,KAAD,CAAgB,CACdN,gBAAgB,CAAhBA,KAAgB,CAAhBA,CAHJ,CAAmB,CAAnB,CAOAO,eAAe,GACf,MAAO,WAAM,CACXR,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,CACAK,iBAAiB,CAAjBA,mBAAAA,CAAAA,qBAAAA,CAAAA,OAAAA,EAFF,CAAA,CAfFN,CAAAA,EAqBA,MAAA,CAAA,OAAA,CACD","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}