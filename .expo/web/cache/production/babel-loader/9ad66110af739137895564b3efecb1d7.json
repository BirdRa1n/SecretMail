{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"];import React from'react';function createContext(rootComponentName){var Context=React.createContext(null);function Provider(props){var children=props.children,providerProps=_objectWithoutProperties(props,_excluded);var value=React.useMemo(function(){return providerProps;},Object.values(providerProps));return React.createElement(Context.Provider,{value:value},children);}function useContext(consumerName){var context=React.useContext(Context);if(context===null){throw new Error(\"`\".concat(consumerName,\"` must be used within `\").concat(rootComponentName,\"`\"));}return context;}Provider.displayName=rootComponentName+'Provider';return[Provider,useContext];}export{createContext};","map":{"version":3,"sources":["createContext.tsx"],"names":["Context","React","providerProps","value","Object","context","Provider","rootComponentName"],"mappings":"gHAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CAEA,QAAA,CAAA,aAAA,CAAA,iBAAA,CAEE,CACA,GAAMA,CAAAA,OAAO,CAAGC,KAAK,CAALA,aAAAA,CAAhB,IAAgBA,CAAhB,CAEA,QAAA,CAAA,QAAA,CAAA,KAAA,CAA2E,CACzE,GAAM,CAAA,QAAN,CADyE,KACzE,CAAM,QAAN,CAAqBC,aAArB,0BADyE,KACzE,YAEA,GAAMC,CAAAA,KAAK,CAAGF,KAAK,CAALA,OAAAA,CACZ,iBADYA,CAAAA,aACZ,EADYA,CAGZG,MAAM,CAANA,MAAAA,CAHF,aAGEA,CAHYH,CAAd,CAKA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,QAAA,CAAA,CAAkB,KAAK,CAAEE,KAAzB,CAAA,CAAP,QAAO,CAAP,CACD,CAED,QAAA,CAAA,UAAA,CAAA,YAAA,CAA0C,CACxC,GAAME,CAAAA,OAAO,CAAGJ,KAAK,CAALA,UAAAA,CAAhB,OAAgBA,CAAhB,CACA,GAAII,OAAO,GAAX,IAAA,CAAsB,CACpB,KAAM,IAAA,CAAA,KAAA,CAAA,IAAA,MAAA,CAAA,YAAA,CAAA,yBAAA,EAAA,MAAA,CAAA,iBAAA,CAAN,GAAM,CAAA,CAAN,CAGD,CACD,MAAA,CAAA,OAAA,CACD,CAEDC,QAAQ,CAARA,WAAAA,CAAuBC,iBAAiB,CAAxCD,UAAAA,CACA,MAAO,CAAA,QAAA,CAAP,UAAO,CAAP,CACD,CAED,OAAA,aAAA","sourcesContent":["import React from 'react';\n\nfunction createContext<ContextValueType extends object>(\n  rootComponentName: string\n) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(\n        `\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``\n      );\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"]},"metadata":{},"sourceType":"module"}