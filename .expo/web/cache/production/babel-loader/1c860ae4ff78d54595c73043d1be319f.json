{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"hideDragIndicator\",\"children\",\"handleClose\",\"pan\",\"sheetHeight\"],_excluded2=[\"_dragIndicator\",\"_dragIndicatorWrapperOffSet\",\"_dragIndicatorWrapper\"],_excluded3=[\"children\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Modal}from\"../../composites/Modal\";import{usePropsResolution}from\"../../../hooks\";import Animated from\"react-native-web/dist/exports/Animated\";import PanResponder from\"react-native-web/dist/exports/PanResponder\";import{ModalContext}from\"../Modal/Context\";import Box from\"../../primitives/Box\";import{ActionSheetContext}from\"./ActionSheetContext\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Content=memo(forwardRef(function(_ref,ref){var hideDragIndicator=_ref.hideDragIndicator,children=_ref.children,handleClose=_ref.handleClose,pan=_ref.pan,sheetHeight=_ref.sheetHeight,props=_objectWithoutProperties(_ref,_excluded);var _usePropsResolution=usePropsResolution('ActionsheetContent',props),_dragIndicator=_usePropsResolution._dragIndicator,_dragIndicatorWrapperOffSet=_usePropsResolution._dragIndicatorWrapperOffSet,_dragIndicatorWrapper=_usePropsResolution._dragIndicatorWrapper,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var panResponder=React.useRef(PanResponder.create({onStartShouldSetPanResponder:function onStartShouldSetPanResponder(){return true;},onMoveShouldSetPanResponder:function onMoveShouldSetPanResponder(_evt,gestureState){return gestureState.dy>15;},onPanResponderMove:function onPanResponderMove(e,gestureState){if(gestureState.dy>0){Animated.event([null,{dy:pan.y}],{useNativeDriver:false})(e,gestureState);}},onPanResponderRelease:function onPanResponderRelease(_e,gestureState){if(sheetHeight.current/4-gestureState.dy<0){Animated.timing(pan,{toValue:{x:0,y:sheetHeight.current},duration:150,useNativeDriver:true}).start(handleClose);setTimeout(function(){Animated.spring(pan,{toValue:{x:0,y:0},overshootClamping:true,useNativeDriver:true}).start();});}else{Animated.spring(pan,{toValue:{x:0,y:0},overshootClamping:true,useNativeDriver:true}).start();}}})).current;return React.createElement(React.Fragment,null,!hideDragIndicator?React.createElement(React.Fragment,null,React.createElement(Box,_extends({},panResponder.panHandlers,_dragIndicatorWrapperOffSet))):null,React.createElement(Modal.Content,_extends({},resolvedProps,{ref:ref,safeAreaBottom:true}),!hideDragIndicator?React.createElement(React.Fragment,null,React.createElement(Box,_extends({},panResponder.panHandlers,_dragIndicatorWrapper),React.createElement(Box,_dragIndicator))):null,children));}));var ActionsheetContent=function ActionsheetContent(_ref2,ref){var children=_ref2.children,props=_objectWithoutProperties(_ref2,_excluded3);var _React$useContext=React.useContext(ModalContext),handleClose=_React$useContext.handleClose;var _React$useContext2=React.useContext(ActionSheetContext),hideDragIndicator=_React$useContext2.hideDragIndicator;var pan=React.useRef(new Animated.ValueXY()).current;var sheetHeight=React.useRef(0);var handleCloseCallback=React.useCallback(handleClose,[ModalContext,handleClose]);if(useHasResponsiveProps(props)){return null;}return React.createElement(Animated.View,{style:{transform:[{translateY:pan.y}],width:'100%'},onLayout:function onLayout(event){var height=event.nativeEvent.layout.height;sheetHeight.current=height;},pointerEvents:\"box-none\"},React.createElement(Content,_extends({children:children,sheetHeight:sheetHeight,pan:pan,hideDragIndicator:hideDragIndicator,handleClose:handleCloseCallback,ref:ref},props)));};export default memo(forwardRef(ActionsheetContent));","map":{"version":3,"sources":["ActionsheetContent.tsx"],"names":["Content","memo","forwardRef","props","resolvedProps","usePropsResolution","panResponder","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","gestureState","onPanResponderMove","Animated","dy","pan","y","useNativeDriver","onPanResponderRelease","sheetHeight","toValue","x","current","duration","setTimeout","overshootClamping","ActionsheetContent","handleClose","React","hideDragIndicator","handleCloseCallback","useHasResponsiveProps","transform","translateY","width","event","height","ref"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetContentProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { Animated, PanResponder } from 'react-native';\nimport { ModalContext } from '../Modal/Context';\nimport Box from '../../primitives/Box';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Content = memo(\n  forwardRef(\n    (\n      {\n        hideDragIndicator,\n        children,\n        handleClose,\n        pan,\n        sheetHeight,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const {\n        _dragIndicator,\n        _dragIndicatorWrapperOffSet,\n        _dragIndicatorWrapper,\n        ...resolvedProps\n      } = usePropsResolution('ActionsheetContent', props);\n\n      const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onMoveShouldSetPanResponder: (_evt, gestureState) => {\n            return gestureState.dy > 15;\n          },\n          onPanResponderMove: (e, gestureState) => {\n            if (gestureState.dy > 0) {\n              Animated.event([null, { dy: pan.y }], {\n                useNativeDriver: false,\n              })(e, gestureState);\n            }\n          },\n          onPanResponderRelease: (_e, gestureState) => {\n            // If sheet is dragged 1/4th of it's height, close it\n            if (sheetHeight.current / 4 - gestureState.dy < 0) {\n              Animated.timing(pan, {\n                toValue: { x: 0, y: sheetHeight.current },\n                duration: 150,\n                useNativeDriver: true,\n              }).start(handleClose);\n\n              setTimeout(() => {\n                Animated.spring(pan, {\n                  toValue: { x: 0, y: 0 },\n                  overshootClamping: true,\n                  useNativeDriver: true,\n                }).start();\n              });\n            } else {\n              Animated.spring(pan, {\n                toValue: { x: 0, y: 0 },\n                overshootClamping: true,\n                useNativeDriver: true,\n              }).start();\n            }\n          },\n        })\n      ).current;\n\n      return (\n        <>\n          {!hideDragIndicator ? (\n            <>\n              {/* To increase the draggable area */}\n              <Box\n                {...panResponder.panHandlers}\n                {..._dragIndicatorWrapperOffSet}\n              />\n            </>\n          ) : null}\n\n          <Modal.Content {...resolvedProps} ref={ref} safeAreaBottom>\n            {!hideDragIndicator ? (\n              <>\n                {/* Hack. Fix later. Add -2 negative margin to remove the padding added by ActionSheetContent */}\n                <Box {...panResponder.panHandlers} {..._dragIndicatorWrapper}>\n                  <Box {..._dragIndicator} />\n                </Box>\n              </>\n            ) : null}\n\n            {children}\n          </Modal.Content>\n        </>\n      );\n    }\n  )\n);\nconst ActionsheetContent = (\n  { children, ...props }: IActionsheetContentProps,\n  ref?: any\n) => {\n  // return null;\n  const { handleClose } = React.useContext(ModalContext);\n  const { hideDragIndicator } = React.useContext(ActionSheetContext);\n  const pan = React.useRef(new Animated.ValueXY()).current;\n  const sheetHeight = React.useRef(0);\n\n  const handleCloseCallback = React.useCallback(handleClose, [\n    ModalContext,\n    handleClose,\n  ]);\n\n  // useEffect(() => {\n\n  // }, [])\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={{\n        transform: [{ translateY: pan.y }],\n        width: '100%',\n      }}\n      onLayout={(event) => {\n        const { height } = event.nativeEvent.layout;\n        sheetHeight.current = height;\n      }}\n      pointerEvents=\"box-none\"\n    >\n      <Content\n        children={children}\n        sheetHeight={sheetHeight}\n        pan={pan}\n        hideDragIndicator={hideDragIndicator}\n        handleClose={handleCloseCallback}\n        ref={ref}\n        {...props}\n      />\n    </Animated.View>\n  );\n};\n\nexport default memo(forwardRef(ActionsheetContent));\n"]},"metadata":{},"sourceType":"module"}