{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectDestructuringEmpty from\"@babel/runtime/helpers/objectDestructuringEmpty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import get from'lodash.get';import isNil from'lodash.isnil';import mergeWith from'lodash.mergewith';import cloneDeep from'lodash.clonedeep';import{themePropertyMap}from\"./../../theme/base\";import{getClosestBreakpoint,findLastValidBreakpoint,hasValidBreakpointFormat,extractInObject}from\"./../../theme/tools\";import{useContrastText}from\"../useContrastText\";export function extractProps(props,theme,_ref,componentTheme,currentBreakpoint){_objectDestructuringEmpty(_ref);var newProps={};for(var property in props){if(themePropertyMap[property]){var propValues=extractPropertyFromFunction(property,props,theme,componentTheme);if(typeof propValues==='string'||typeof propValues==='number'){newProps[property]=propValues;}else if(!isNil(propValues)){for(var nestedProp in propValues){newProps[nestedProp]=get(theme,\"\".concat(themePropertyMap[nestedProp],\".\").concat(propValues[nestedProp]),propValues[nestedProp]);}}else if(property==='shadow'){var shadowProps=theme[themePropertyMap[property]][props[property]];if(!isNil(shadowProps)){newProps=_objectSpread(_objectSpread({},newProps),shadowProps);}}else{newProps[property]=resolveValueWithBreakpoint(props[property],theme.breakpoints,currentBreakpoint,property);}}else{newProps[property]=resolveValueWithBreakpoint(props[property],theme.breakpoints,currentBreakpoint,property);}}return cloneDeep(newProps);}function filterDefaultProps(props,defaultProps){var _extractInObject=extractInObject(defaultProps,Object.keys(props)),_extractInObject2=_slicedToArray(_extractInObject,2),resultProps=_extractInObject2[1];return resultProps;}export var extractPropertyFromFunction=function extractPropertyFromFunction(property,props,theme,componentTheme){var propValues;if(componentTheme&&typeof componentTheme[themePropertyMap[property]]==='function'){var funcProps=componentTheme[themePropertyMap[property]](_objectSpread({theme:theme},props));var isNested=Object.keys(funcProps).some(function(key){return funcProps[key]&&typeof funcProps[key]==='object';});propValues=isNested?_objectSpread({},get(funcProps,\"\".concat(props[property]))):_objectSpread({},funcProps);}else{propValues=get(componentTheme,\"\".concat(themePropertyMap[property],\".\").concat(props[property]));}return propValues;};export function mergeUnderscoreProps(newProps,props){var _props=Object.keys(newProps).filter(function(propName){return propName.startsWith('_');});_props.forEach(function(propName){var _newProps$bg,_newProps$propName$co,_newProps$propName,_props$propName;var bg=(_newProps$bg=newProps.bg)!==null&&_newProps$bg!==void 0?_newProps$bg:newProps.backgroundColor;var textColor=bg?{color:useContrastText(bg,(_newProps$propName$co=(_newProps$propName=newProps[propName])===null||_newProps$propName===void 0?void 0:_newProps$propName.color)!==null&&_newProps$propName$co!==void 0?_newProps$propName$co:(_props$propName=props[propName])===null||_props$propName===void 0?void 0:_props$propName.color)}:{};newProps[propName]=_objectSpread(_objectSpread(_objectSpread({},textColor),newProps[propName]),props[propName]);});return newProps;}export var resolveValueWithBreakpoint=function resolveValueWithBreakpoint(values,breakpointTheme,currentBreakpoint,property){if(hasValidBreakpointFormat(values,breakpointTheme,property)){return findLastValidBreakpoint(values,breakpointTheme,currentBreakpoint);}else{return values;}};export function calculateProps(theme,colorModeProps,componentTheme,props,windowWidth){var currentBreakpoint=getClosestBreakpoint(theme.breakpoints,windowWidth);if(!props){props={};}var newProps;if(componentTheme){newProps=extractProps(filterDefaultProps(props,componentTheme.defaultProps),theme,colorModeProps,componentTheme,currentBreakpoint);var componentBaseStyle=typeof componentTheme.baseStyle!=='function'?componentTheme.baseStyle:componentTheme.baseStyle(_objectSpread(_objectSpread(_objectSpread({theme:theme},newProps),props),colorModeProps));newProps=mergeWith(newProps,componentBaseStyle,function(objValue,srcValue,key){if(!isNil(objValue)){delete newProps[key];}});var variant=props.variant||get(componentTheme,'defaultProps.variant');if(variant&&componentTheme.variants&&componentTheme.variants[variant]){var colorScheme=props.colorScheme||get(componentTheme,'defaultProps.colorScheme');var variantProps=componentTheme.variants[variant](_objectSpread(_objectSpread(_objectSpread({},props),newProps),{},{colorScheme:colorScheme,theme:theme},colorModeProps));variantProps=extractProps(variantProps,theme,colorModeProps,componentTheme,currentBreakpoint);newProps=mergeWith(newProps,variantProps,function(objValue,srcValue,key){if(!isNil(objValue)){delete newProps[key];}});delete newProps.variant;delete newProps.colorScheme;}}var extractedProps=extractProps(props,theme,colorModeProps,componentTheme,currentBreakpoint);newProps=mergeWith(newProps,extractedProps,function(objValue,srcValue,key){if(!isNil(objValue)){delete newProps[key];}});newProps=mergeUnderscoreProps(newProps,props);return newProps;}","map":{"version":3,"sources":["utils.ts"],"names":["newProps","themePropertyMap","propValues","extractPropertyFromFunction","isNil","get","property","shadowProps","theme","props","resolveValueWithBreakpoint","cloneDeep","extractInObject","Object","componentTheme","funcProps","isNested","_props","propName","bg","textColor","color","useContrastText","hasValidBreakpointFormat","findLastValidBreakpoint","currentBreakpoint","getClosestBreakpoint","extractProps","filterDefaultProps","componentBaseStyle","colorModeProps","mergeWith","variant","colorScheme","variantProps","extractedProps","mergeUnderscoreProps"],"mappings":"g+BAAA,MAAA,CAAA,GAAA,KAAA,YAAA,CACA,MAAA,CAAA,KAAA,KAAA,cAAA,CACA,MAAA,CAAA,SAAA,KAAA,kBAAA,CACA,MAAA,CAAA,SAAA,KAAA,kBAAA,CACA,OAAA,gBAAA,0BACA,OAAA,oBAAA,CAAA,uBAAA,CAAA,wBAAA,CAAA,eAAA,2BAMA,OAAA,eAAA,0BAcA,MAAO,SAAA,CAAA,YAAA,CAAA,KAAA,CAAA,KAAA,MAAA,cAAA,CAAA,iBAAA,CAML,iCACA,GAAIA,CAAAA,QAAa,CAAjB,EAAA,CACA,IAAK,GAAL,CAAA,QAAA,GAAA,CAAA,KAAA,CAA4B,CAE1B,GAAIC,gBAAgB,CAApB,QAAoB,CAApB,CAAgC,CAC9B,GAAIC,CAAAA,UAAU,CAAGC,2BAA2B,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAA5C,cAA4C,CAA5C,CAMA,GAAI,MAAA,CAAA,UAAA,GAAA,QAAA,EAAkC,MAAA,CAAA,UAAA,GAAtC,QAAA,CAAsE,CACpEH,QAAQ,CAARA,QAAQ,CAARA,CAAAA,UAAAA,CADF,CAAA,IAEO,IAAI,CAACI,KAAK,CAAV,UAAU,CAAV,CAAwB,CAC7B,IAAK,GAAL,CAAA,UAAA,GAAA,CAAA,UAAA,CAAmC,CACjCJ,QAAQ,CAARA,UAAQ,CAARA,CAAuBK,GAAG,CAAA,KAAA,CAAA,GAAA,MAAA,CAErBJ,gBAAgB,CAFK,UAEL,CAFK,CAAA,GAAA,EAAA,MAAA,CAEWC,UAAU,CAFrB,UAEqB,CAFrB,CAAA,CAGxBA,UAAU,CAHZF,UAGY,CAHc,CAA1BA,CAKD,CAPI,CAAA,IAQA,IAAIM,QAAQ,GAAZ,QAAA,CAA2B,CAChC,GAAIC,CAAAA,WAAW,CAAGC,KAAK,CAACP,gBAAgB,CAAtBO,QAAsB,CAAjB,CAALA,CAAkCC,KAAK,CAAzD,QAAyD,CAAvCD,CAAlB,CACA,GAAI,CAACJ,KAAK,CAAV,WAAU,CAAV,CAAyB,CACvBJ,QAAQ,gCAAG,QAAH,EAAqBO,WAArB,CAARP,CACD,CAJI,CAAA,IAKA,CACLA,QAAQ,CAARA,QAAQ,CAARA,CAAqBU,0BAA0B,CAC7CD,KAAK,CADwC,QACxC,CADwC,CAE7CD,KAAK,CAFwC,WAAA,CAAA,iBAAA,CAA/CR,QAA+C,CAA/CA,CAMD,CA7BH,CAAA,IA8BO,CACLA,QAAQ,CAARA,QAAQ,CAARA,CAAqBU,0BAA0B,CAC7CD,KAAK,CADwC,QACxC,CADwC,CAE7CD,KAAK,CAFwC,WAAA,CAAA,iBAAA,CAA/CR,QAA+C,CAA/CA,CAMD,CACF,CACD,MAAOW,CAAAA,SAAS,CAAhB,QAAgB,CAAhB,CACD,CAKD,QAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,YAAA,CAA2D,CACzD,qBAAsBC,eAAe,CAAA,YAAA,CAAeC,MAAM,CAANA,IAAAA,CAApD,KAAoDA,CAAf,CAArC,sDAAI,WAAJ,sBACA,MAAA,CAAA,WAAA,CACD,CAWD,MAAO,IAAMV,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,cAAA,CAKtC,CACH,GADG,CAAA,UACH,CAEA,GACEW,cAAc,EACd,MAAOA,CAAAA,cAAc,CAACb,gBAAgB,CAAtC,QAAsC,CAAjB,CAArB,GAFF,UAAA,CAGE,CACA,GAAIc,CAAAA,SAAS,CAAG,cAAc,CAACd,gBAAgB,CAA/B,QAA+B,CAAjB,CAAd,gBACdO,KADyD,CACzDA,KADc,EAEXC,KAFW,EAAhB,CAKA,GAAIO,CAAAA,QAAiB,CAAG,MAAM,CAAN,IAAA,CAAA,SAAA,EAAA,IAAA,CAA4B,SAAA,GAAA,CAAe,CACjE,MAAOD,CAAAA,SAAS,CAATA,GAAS,CAATA,EAAkB,MAAOA,CAAAA,SAAS,CAAhB,GAAgB,CAAhB,GAAzB,QAAA,CAPF,CAMwB,CAAxB,CAIAb,UAAU,CAAGc,QAAQ,kBACZX,GAAG,CAAA,SAAA,CAAA,GAAA,MAAA,CAAeI,KAAK,CAApB,QAAoB,CAApB,CAAA,CADS,mBAEZM,SAFY,CAArBb,CAbF,CAAA,IAgBO,CAELA,UAAU,CAAGG,GAAG,CAAA,cAAA,CAAA,GAAA,MAAA,CAEXJ,gBAAgB,CAFL,QAEK,CAFL,CAAA,GAAA,EAAA,MAAA,CAEmBQ,KAAK,CAFxCP,QAEwC,CAFxB,CAAA,CAAhBA,CAID,CACD,MAAA,CAAA,UAAA,CA/BK,CAAA,CAqCP,MAAO,SAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,KAAA,CAAyD,CAC9D,GAAMe,CAAAA,MAAM,CAAGJ,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAAA,MAAAA,CAA8BK,SAAAA,QAAD,QAC1CA,CAAAA,QAAQ,CAARA,UAAAA,CADF,GACEA,CAD0C,EAA7BL,CAAf,CAGAI,MAAM,CAANA,OAAAA,CAAgBC,SAAAA,QAAD,CAAsB,CAAA,GAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,kBAAA,CAAA,eAAA,CAEnC,GAAMC,CAAAA,EAAE,CAAA,CAAA,YAAA,CAAGnB,QAAQ,CAAX,EAAA,IAAA,IAAA,EAAA,YAAA,GAAA,IAAA,EAAA,CAAA,YAAA,CAAkBA,QAAQ,CAAlC,eAAA,CACA,GAAMoB,CAAAA,SAAS,CAAGD,EAAE,CAChB,CACEE,KAAK,CAAEC,eAAe,CAAA,EAAA,CAAA,CAAA,qBAAA,CAAA,CAAA,kBAAA,CAEpBtB,QAAQ,CAFY,QAEZ,CAFY,IAAA,IAAA,EAAA,kBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAEpBA,kBAAAA,CAFoB,KAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,qBAAA,CAAA,CAAA,eAAA,CAESS,KAAK,CAFd,QAEc,CAFd,IAAA,IAAA,EAAA,eAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAESA,eAAAA,CAFT,KAAA,CADxB,CADgB,CAHe,EAGnC,CASAT,QAAQ,CAARA,QAAQ,CAARA,8CAAqB,SAArBA,EAEKA,QAAQ,CAFQ,QAER,CAFbA,EAGKS,KAAK,CAAA,QAAA,CAHVT,EAZFiB,CAAAA,EAkBA,MAAA,CAAA,QAAA,CACD,CAUD,MAAO,IAAMP,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAAA,MAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,QAAA,CAKrC,CACH,GAAIa,wBAAwB,CAAA,MAAA,CAAA,eAAA,CAA5B,QAA4B,CAA5B,CAAiE,CAG/D,MAAOC,CAAAA,uBAAuB,CAAA,MAAA,CAAA,eAAA,CAA9B,iBAA8B,CAA9B,CAHF,CAAA,IAIO,CACL,MAAA,CAAA,MAAA,CACD,CAZI,CAAA,CAyBP,MAAO,SAAA,CAAA,cAAA,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAAA,KAAA,CAAA,WAAA,CAML,CACA,GAAIC,CAAAA,iBAAiB,CAAGC,oBAAoB,CAAClB,KAAK,CAAN,WAAA,CAA5C,WAA4C,CAA5C,CACA,GAAI,CAAJ,KAAA,CAAY,CACVC,KAAK,CAALA,EAAAA,CACD,CAED,GAAA,CAAA,QAAA,CACA,GAAA,cAAA,CAAoB,CAElBT,QAAQ,CAAG2B,YAAY,CACrBC,kBAAkB,CAAA,KAAA,CAAQd,cAAc,CADnB,YACH,CADG,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAFL,iBAEK,CAAvBd,CAQA,GAAI6B,CAAAA,kBAAkB,CACpB,MAAOf,CAAAA,cAAc,CAArB,SAAA,GAAA,UAAA,CACIA,cAAc,CADlB,SAAA,CAEI,cAAc,CAAd,SAAA,4CACEN,KADuB,CACvBA,KADF,EAAyB,QAAzB,EAAyB,KAAzB,EAIKsB,cAJL,EAHN,CASA9B,QAAQ,CAAG+B,SAAS,CAAA,QAAA,CAAA,kBAAA,CAIlB,SAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAA6B,CAC3B,GAAI,CAAC3B,KAAK,CAAV,QAAU,CAAV,CAAsB,CACpB,MAAOJ,CAAAA,QAAQ,CAAf,GAAe,CAAf,CACD,CAPLA,CAAoB,CAApBA,CAWA,GAAMgC,CAAAA,OAAO,CACXvB,KAAK,CAALA,OAAAA,EAAiBJ,GAAG,CAAA,cAAA,CA/BJ,sBA+BI,CADtB,CAGA,GACE2B,OAAO,EACPlB,cAAc,CADdkB,QAAAA,EAEAlB,cAAc,CAAdA,QAAAA,CAHF,OAGEA,CAHF,CAIE,CACA,GAAMmB,CAAAA,WAAW,CACfxB,KAAK,CAALA,WAAAA,EAAqBJ,GAAG,CAAA,cAAA,CAD1B,0BAC0B,CAD1B,CAEA,GAAI6B,CAAAA,YAAY,CAAG,cAAc,CAAd,QAAA,CAAA,OAAA,+CAAiC,KAAjC,EAAiC,QAAjC,MAGjBD,WAHkD,CAGlDA,WAHiB,CAIjBzB,KAJkD,CAIlDA,KAJiB,EAKdsB,cALc,EAAnB,CAOAI,YAAY,CAAGP,YAAY,CAAA,YAAA,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAV3B,iBAU2B,CAA3BO,CAQAlC,QAAQ,CAAG+B,SAAS,CAAA,QAAA,CAAA,YAAA,CAIlB,SAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAA6B,CAC3B,GAAI,CAAC3B,KAAK,CAAV,QAAU,CAAV,CAAsB,CACpB,MAAOJ,CAAAA,QAAQ,CAAf,GAAe,CAAf,CACD,CAPLA,CAAoB,CAApBA,CAUA,MAAOA,CAAAA,QAAQ,CAAf,OAAA,CACA,MAAOA,CAAAA,QAAQ,CAAf,WAAA,CACD,CA1EH,CA6EA,GAAImC,CAAAA,cAAc,CAAGR,YAAY,CAAA,KAAA,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CA7EjC,iBA6EiC,CAAjC,CASA3B,QAAQ,CAAG+B,SAAS,CAAA,QAAA,CAAA,cAAA,CAA2B,SAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAA6B,CAC1E,GAAI,CAAC3B,KAAK,CAAV,QAAU,CAAV,CAAsB,CACpB,MAAOJ,CAAAA,QAAQ,CAAf,GAAe,CAAf,CACD,CAHHA,CAAoB,CAApBA,CAKAA,QAAQ,CAAGoC,oBAAoB,CAAA,QAAA,CAA/BpC,KAA+B,CAA/BA,CACA,MAAA,CAAA,QAAA,CACD","sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  {},\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]][props[property]];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          theme.breakpoints,\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        theme.breakpoints,\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  breakpointTheme: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]},"metadata":{},"sourceType":"module"}