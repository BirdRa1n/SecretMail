{"ast":null,"code":"import{useFocusManager}from'@react-aria/focus';import{useId}from'@react-aria/utils';import Platform from\"react-native-web/dist/exports/Platform\";export var useMenuTrigger=function useMenuTrigger(_ref){var handleOpen=_ref.handleOpen,isOpen=_ref.isOpen;var menuTriggerId=useId();return{'onKeyDownCapture':function onKeyDownCapture(event){if([' ','Enter','ArrowUp','ArrowDown'].includes(event.key)){event.preventDefault();handleOpen();}},'aria-haspopup':'menu','aria-expanded':isOpen?true:undefined,'nativeID':menuTriggerId};};export var useMenu=function useMenu(){var focusManager=useFocusManager();var onKeyDown=function onKeyDown(e){switch(e.key){case'ArrowDown':{e.preventDefault();focusManager.focusNext({wrap:true});break;}case'ArrowUp':{e.preventDefault();focusManager.focusPrevious({wrap:true});break;}}};return{onKeyDown:onKeyDown,accessibilityRole:'menu'};};export var useMenuItem=function useMenuItem(_ref2){var textValue=_ref2.textValue,ref=_ref2.ref;return{accessibilityRole:'menuitem',dataSet:{nativebaseMenuItem:textValue},onHoverIn:function onHoverIn(){if(ref.current&&Platform.OS==='web')ref.current.focus();}};};export var useMenuOptionItem=function useMenuOptionItem(_ref3){var isChecked=_ref3.isChecked,type=_ref3.type;return{accessibilityRole:'menuitem'+(Platform.OS==='web'?type:''),accessibilityState:{checked:isChecked},accessibilityChecked:isChecked};};var ITEM_ATTR='data-nativebase-menu-item';var getValue=function getValue(element){var _element$getAttribute;return(_element$getAttribute=element.getAttribute(ITEM_ATTR))!==null&&_element$getAttribute!==void 0?_element$getAttribute:'';};export var useMenuTypeahead=function useMenuTypeahead(props){return{onKeyDown:function onKeyDown(event){if(props.onKeyDown){props.onKeyDown(event);}if(event.key.length===1&&!(event.ctrlKey||event.altKey||event.metaKey)){var container=event.currentTarget;var values=Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR,\"]\"))).map(getValue);var searchKey=event.key;var foundValue=values.find(function(value){return value.toLowerCase().startsWith(searchKey);});var newItem=container.querySelector(\"[\".concat(ITEM_ATTR,\"=\\\"\").concat(foundValue,\"\\\"]\"));if(newItem){setTimeout(function(){return newItem.focus();});}}}};};","map":{"version":3,"sources":["useMenu.tsx"],"names":["useMenuTrigger","isOpen","menuTriggerId","useId","event","handleOpen","useMenu","focusManager","useFocusManager","onKeyDown","e","wrap","accessibilityRole","useMenuItem","ref","dataSet","nativebaseMenuItem","textValue","onHoverIn","Platform","useMenuOptionItem","type","accessibilityState","checked","isChecked","accessibilityChecked","ITEM_ATTR","getValue","element","useMenuTypeahead","props","container","values","Array","searchKey","foundValue","value","newItem","setTimeout"],"mappings":"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","sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n  const onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}