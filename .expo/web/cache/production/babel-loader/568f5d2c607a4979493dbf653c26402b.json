{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"htmlProps\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{usePropsResolution}from\"../../../hooks/useThemeProps\";import Box from\"../../primitives/Box\";import{useFormControlProvider,FormControlContext}from\"./useFormControl\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var FormControl=function FormControl(props,ref){var _useFormControlProvid=useFormControlProvider(props),htmlProps=_useFormControlProvid.htmlProps,context=_objectWithoutProperties(_useFormControlProvid,_excluded);var resolvedProps=usePropsResolution('FormControl',props,{isDisabled:context.isDisabled,isReadOnly:context.isReadOnly,isInvalid:context.isInvalid});if(useHasResponsiveProps(props)){return null;}return React.createElement(FormControlContext.Provider,{value:context},React.createElement(Box,_extends({},resolvedProps,htmlProps,{ref:ref})));};export default memo(forwardRef(FormControl));","map":{"version":3,"sources":["FormControl.tsx"],"names":["FormControl","context","useFormControlProvider","resolvedProps","usePropsResolution","isDisabled","isReadOnly","isInvalid","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":"wYAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,kBAAA,oCACA,MAAA,CAAA,GAAA,4BAEA,OAAA,sBAAA,CAAA,kBAAA,wBACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAA,KAAA,CAAA,GAAA,CAAwC,CAC1D,0BAAkCE,sBAAsB,CAAxD,KAAwD,CAAxD,CAAM,SAAN,uBAAM,SAAN,CAAsBD,OAAtB,2DACA,GAAME,CAAAA,aAAa,CAAGC,kBAAkB,CAAA,aAAA,CAAA,KAAA,CAAuB,CAC7DC,UAAU,CAAEJ,OAAO,CAD0C,UAAA,CAE7DK,UAAU,CAAEL,OAAO,CAF0C,UAAA,CAG7DM,SAAS,CAAEN,OAAO,CAH2C,SAAA,CAAvB,CAAxC,CAOA,GAAIO,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,CAAA,CAA6B,KAAK,CAAEP,OAApC,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,SAAA,CAAA,CAAuC,GAAG,CAAEQ,GAA5C,CAAA,CAAA,CADF,CADF,CAZF,CAAA,CAmBA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,WAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"]},"metadata":{},"sourceType":"module"}