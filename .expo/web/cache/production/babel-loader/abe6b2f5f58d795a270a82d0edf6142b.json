{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useMemo}from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{HybridContext}from\"./Context\";import{useModeManager}from\"./../color-mode/hooks\";import{keyboardDismissHandlerManager}from\"../../hooks\";var HybridProvider=function HybridProvider(_ref){var children=_ref.children,_ref$options=_ref.options,_ref$options$initialC=_ref$options.initialColorMode,initialColorMode=_ref$options$initialC===void 0?'light':_ref$options$initialC,_ref$options$accessib=_ref$options.accessibleColors,isTextColorAccessible=_ref$options$accessib===void 0?false:_ref$options$accessib,useSystemColorMode=_ref$options.useSystemColorMode,colorModeManager=_ref.colorModeManager;var _useModeManager=useModeManager(initialColorMode,useSystemColorMode,colorModeManager),colorMode=_useModeManager.colorMode,setColorMode=_useModeManager.setColorMode;var toggleColorMode=React.useCallback(function(){setColorMode(colorMode==='light'?'dark':'light');},[colorMode,setColorMode]);var _React$useState=React.useState(isTextColorAccessible),_React$useState2=_slicedToArray(_React$useState,2),accessibleColors=_React$useState2[0],setAccessibleColors=_React$useState2[1];var contextValue=useMemo(function(){return{colorMode:{colorMode:colorMode,toggleColorMode:toggleColorMode,setColorMode:setColorMode,accessibleColors:accessibleColors,setAccessibleColors:setAccessibleColors}};},[colorMode,toggleColorMode,setColorMode,accessibleColors,setAccessibleColors]);React.useEffect(function(){var escapeKeyListener=null;if(Platform.OS==='web'){escapeKeyListener=function escapeKeyListener(e){if(e.key==='Escape'){if(keyboardDismissHandlerManager.length()>0){var lastHandler=keyboardDismissHandlerManager.pop();lastHandler();}}};document.addEventListener('keydown',escapeKeyListener);}return function(){if(Platform.OS==='web'){document.removeEventListener('keydown',escapeKeyListener);}};},[]);return React.createElement(HybridContext.Provider,{value:contextValue},children);};export default HybridProvider;","map":{"version":3,"sources":["HybridProvider.tsx"],"names":["HybridProvider","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","setColorMode","useModeManager","toggleColorMode","colorMode","React","contextValue","useMemo","setAccessibleColors","escapeKeyListener","Platform","e","keyboardDismissHandlerManager","lastHandler","document"],"mappings":"iEAAA,MAAA,CAAA,KAAA,EAAA,OAAA,KAAA,OAAA,C,6DAEA,OAAA,aAAA,iBACA,OAAA,cAAA,6BAEA,OAAA,6BAAA,mBAEA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAQQ,IARP,CAAA,QAQO,MARP,QAQO,mBAN7BC,OAM6B,oCAL3BC,gBAK2B,CAL3BA,gBAK2B,gCANpB,OAMoB,0DAJ3BC,gBAI2B,CAJTC,qBAIS,gCANpB,KAMoB,uBAH3BC,kBAG2B,cAH3BA,kBAG2B,CAD7BC,gBAC6B,MAD7BA,gBAC6B,CAE7B,oBAAoCE,cAAc,CAAA,gBAAA,CAAA,kBAAA,CAAlD,gBAAkD,CAAlD,CAAM,SAAN,iBAAM,SAAN,CAAmBD,YAAnB,iBAAmBA,YAAnB,CAMA,GAAME,CAAAA,eAAe,CAAG,KAAK,CAAL,WAAA,CAAkB,UAAM,CAC9CF,YAAY,CAACG,SAAS,GAATA,OAAAA,CAAAA,MAAAA,CAAbH,OAAY,CAAZA,CADsB,CAAA,CAErB,CAAA,SAAA,CAV0B,YAU1B,CAFqB,CAAxB,CAKA,oBAAgDI,KAAK,CAALA,QAAAA,CAAhD,qBAAgDA,CAAhD,oDAAM,gBAAN,qBAAM,mBAAN,qBAIA,GAAMC,CAAAA,YAAY,CAAGC,OAAO,CAAC,UAAM,CACjC,MAAO,CACLH,SAAS,CAAE,CACTA,SADS,CACTA,SADS,CAETD,eAFS,CAETA,eAFS,CAGTF,YAHS,CAGTA,YAHS,CAITJ,gBAJS,CAITA,gBAJS,CAKTW,mBAAAA,CAAAA,mBALS,CADN,CAAP,CAD0B,CAAA,CAUzB,CAAA,SAAA,CAAA,eAAA,CAAA,YAAA,CAAA,gBAAA,CAVH,mBAUG,CAVyB,CAA5B,CAkBAH,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAII,CAAAA,iBAAsB,CAA1B,IAAA,CAEA,GAAIC,QAAQ,CAARA,EAAAA,GAAJ,KAAA,CAA2B,CACzBD,iBAAiB,CAAIE,2BAAAA,CAAD,CAAsB,CACxC,GAAIA,CAAC,CAADA,GAAAA,GAAJ,QAAA,CAAwB,CACtB,GAAIC,6BAA6B,CAA7BA,MAAAA,GAAJ,CAAA,CAAgD,CAC9C,GAAMC,CAAAA,WAAgB,CAAGD,6BAA6B,CAAtD,GAAyBA,EAAzB,CACAC,WAAW,GACZ,CACF,CANHJ,CAAAA,CAQAK,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EACD,CAED,MAAO,WAAM,CACX,GAAIJ,QAAQ,CAARA,EAAAA,GAAJ,KAAA,CAA2B,CACzBI,QAAQ,CAARA,mBAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,EACD,CAHH,CAAA,CAfFT,CAAAA,CAAAA,EAAAA,EAsBA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,aAAD,CAAA,QAAA,CAAA,CAAwB,KAAK,CAAEC,YAA/B,CAAA,CADF,QACE,CADF,CAjEF,CAAA,CAwEA,cAAA,CAAA,cAAA","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]},"metadata":{},"sourceType":"module"}