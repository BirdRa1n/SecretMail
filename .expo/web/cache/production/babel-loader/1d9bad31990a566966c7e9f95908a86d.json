{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _excluded=[\"theme\"];import get from'lodash.get';import omit from'lodash.omit';import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import Platform from\"react-native-web/dist/exports/Platform\";import{useNativeBase}from\"./../useNativeBase\";import{omitUndefined,extractInObject}from\"./../../theme/tools/\";import{filterShadowProps}from\"./../../utils/filterShadowProps\";import{calculateProps}from\"./utils\";var filterAndCalculateProps=function filterAndCalculateProps(theme,colorModeProps,componentTheme,propsReceived,windowWidth){var _extractInObject=extractInObject(propsReceived,['children','style','onPress','icon','onOpen','onClose']),_extractInObject2=_slicedToArray(_extractInObject,2),ignoredProps=_extractInObject2[0],props=_extractInObject2[1];var newProps=calculateProps(theme,colorModeProps,componentTheme,props,windowWidth);var mergedProps=filterShadowProps(newProps,ignoredProps,Platform.OS);return omitUndefined(mergedProps);};export function useThemeProps(component,propsReceived){var _useWindowDimensions;var _useNativeBase=useNativeBase(),theme=_useNativeBase.theme,colorModeProps=_objectWithoutProperties(_useNativeBase,_excluded);var componentTheme=get(theme,\"components.\".concat(component));var windowWidth=(_useWindowDimensions=useWindowDimensions())===null||_useWindowDimensions===void 0?void 0:_useWindowDimensions.width;return filterAndCalculateProps(omit(theme,['components']),colorModeProps,componentTheme,propsReceived,windowWidth);}","map":{"version":3,"sources":["useProps.tsx"],"names":["filterAndCalculateProps","extractInObject","newProps","calculateProps","mergedProps","filterShadowProps","Platform","omitUndefined","colorModeProps","useNativeBase","componentTheme","get","windowWidth","useWindowDimensions","omit"],"mappings":"8KAAA,MAAA,CAAA,GAAA,KAAA,YAAA,CACA,MAAA,CAAA,IAAA,KAAA,aAAA,C,gJAEA,OAAA,aAAA,0BACA,OAAA,aAAA,CAAA,eAAA,4BACA,OAAA,iBAAA,uCACA,OAAA,cAAA,eAEA,GAAMA,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAAA,aAAA,CAAA,WAAA,CAM3B,CAIH,qBAA4BC,eAAe,CAAA,aAAA,CAAgB,CAAA,UAAA,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAA3D,SAA2D,CAAhB,CAA3C,sDAAI,YAAJ,sBAAI,KAAJ,sBAQA,GAAIC,CAAAA,QAAQ,CAAGC,cAAc,CAAA,KAAA,CAAA,cAAA,CAAA,cAAA,CAAA,KAAA,CAA7B,WAA6B,CAA7B,CAOA,GAAIC,CAAAA,WAAW,CAAGC,iBAAiB,CAAA,QAAA,CAAA,YAAA,CAAyBC,QAAQ,CAApE,EAAmC,CAAnC,CACA,MAAOC,CAAAA,aAAa,CAApB,WAAoB,CAApB,CA1BF,CAAA,CA6BA,MAAO,SAAA,CAAA,aAAA,CAAA,SAAA,CAAA,aAAA,CAA8D,CAAA,GAAA,CAAA,oBAAA,CACnE,mBAAqCE,aAD8B,EACnE,CAAM,KAAN,gBAAM,KAAN,CAAkBD,cAAlB,oDAGA,GAAME,CAAAA,cAAc,CAAGC,GAAG,CAAA,KAAA,CAAA,cAAA,MAAA,CAJyC,SAIzC,CAAA,CAA1B,CAEA,GAAMC,CAAAA,WAAW,CAAA,CAAA,oBAAA,CAAGC,mBAAH,EAAA,IAAA,IAAA,EAAA,oBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGA,oBAAAA,CAN+C,KAMnE,CAGA,MAAOb,CAAAA,uBAAuB,CAC5Bc,IAAI,CAAA,KAAA,CAAQ,CADgB,YAChB,CAAR,CADwB,CAAA,cAAA,CAAA,cAAA,CAAA,aAAA,CAA9B,WAA8B,CAA9B,CAOD","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, `components.${component}`);\n  // console.log('COMPONENT THEME = ', componentTheme);\n  const windowWidth = useWindowDimensions()?.width;\n\n  // To pass the component theme props and component props seperately\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]},"metadata":{},"sourceType":"module"}