{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"fieldIndex\",\"defaultValue\"],_excluded2=[\"handleChange\",\"value\",\"setRefList\",\"defaultValue\",\"handleMultiValueChange\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import{Input}from\"../../primitives/Input\";import{PinInputContext}from\"./Context\";import Platform from\"react-native-web/dist/exports/Platform\";import{mergeRefs}from\"../../../utils\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var PinInputFiled=function PinInputFiled(_ref,ref){var _ref$fieldIndex=_ref.fieldIndex,fieldIndex=_ref$fieldIndex===void 0?0:_ref$fieldIndex,pDefaultValue=_ref.defaultValue,props=_objectWithoutProperties(_ref,_excluded);var _React$useContext=React.useContext(PinInputContext),handleChange=_React$useContext.handleChange,cValue=_React$useContext.value,setRefList=_React$useContext.setRefList,cDefaultValue=_React$useContext.defaultValue,handleMultiValueChange=_React$useContext.handleMultiValueChange,context=_objectWithoutProperties(_React$useContext,_excluded2);cDefaultValue=cDefaultValue&&cDefaultValue[fieldIndex];var defaultValue=pDefaultValue||cDefaultValue;var value=cValue&&cValue[fieldIndex];var keyPressHandler=function keyPressHandler(event){if(Platform.OS!=='web'){if(event.nativeEvent.key>=0&&event.nativeEvent.key<=9){handleChange&&handleChange(event.nativeEvent.key,fieldIndex);}else if(event.nativeEvent.key==='Backspace'){handleChange&&handleChange('',fieldIndex);}}};var textChangeHandler=function textChangeHandler(value){handleMultiValueChange&&handleMultiValueChange(value,fieldIndex);};var myRef=React.useRef(null);React.useEffect(function(){setRefList&&setRefList(myRef,fieldIndex);},[myRef,fieldIndex,setRefList]);if(useHasResponsiveProps(props)){return null;}return React.createElement(Input,_extends({ref:mergeRefs([myRef,ref])},context,props,{onKeyPress:function onKeyPress(event){return keyPressHandler(event);},onChangeText:function onChangeText(value){return textChangeHandler(value);},keyboardType:\"numeric\",defaultValue:defaultValue,value:value}));};export default React.memo(React.forwardRef(PinInputFiled));","map":{"version":3,"sources":["PinInputField.tsx"],"names":["PinInputFiled","fieldIndex","defaultValue","props","value","context","React","cDefaultValue","pDefaultValue","cValue","keyPressHandler","event","Platform","handleChange","textChangeHandler","handleMultiValueChange","myRef","setRefList","useHasResponsiveProps","mergeRefs"],"mappings":"ifAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,KAAA,8BAEA,OAAA,eAAA,iB,6DAEA,OAAA,SAAA,sBACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAA,GAAA,CAOjB,0BALDC,UAKC,CALDA,UAKC,0BANH,CAMG,iBANH,aAMG,MAJDC,YAIC,CAHEC,KAGF,0CACH,sBAOsBG,KAAK,CAALA,UAAAA,CAPtB,eAOsBA,CAPtB,CAAI,YAAJ,mBAAI,YAAJ,CAAI,MAAJ,mBAEEF,KAFF,CAAI,UAAJ,mBAAI,UAAJ,CAAI,aAAJ,mBAIEF,YAJF,CAAI,sBAAJ,mBAAI,sBAAJ,CAMKG,OANL,wDAQAE,aAAa,CAAGA,aAAa,EAAIA,aAAa,CAA9CA,UAA8C,CAA9CA,CACA,GAAIL,CAAAA,YAAY,CAAGM,aAAa,EAAhC,aAAA,CACA,GAAIJ,CAAAA,KAAK,CAAGK,MAAM,EAAIA,MAAM,CAA5B,UAA4B,CAA5B,CAEA,GAAMC,CAAAA,eAAe,CAAIC,QAAnBD,CAAAA,eAAmBC,CAAAA,KAAD,CAAgB,CACtC,GAAIC,QAAQ,CAARA,EAAAA,GAAJ,KAAA,CAA2B,CACzB,GAAID,KAAK,CAALA,WAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAA8BA,KAAK,CAALA,WAAAA,CAAAA,GAAAA,EAAlC,CAAA,CAA8D,CAC5DE,YAAY,EAAIA,YAAY,CAACF,KAAK,CAALA,WAAAA,CAAD,GAAA,CAA5BE,UAA4B,CAA5BA,CADF,CAAA,IAEO,IAAIF,KAAK,CAALA,WAAAA,CAAAA,GAAAA,GAAJ,WAAA,CAA2C,CAChDE,YAAY,EAAIA,YAAY,CAAA,EAAA,CAA5BA,UAA4B,CAA5BA,CACD,CACF,CAPH,CAAA,CASA,GAAMC,CAAAA,iBAAiB,CAAIV,QAArBU,CAAAA,iBAAqBV,CAAAA,KAAD,CAAgB,CAExCW,sBAAsB,EAAIA,sBAAsB,CAAA,KAAA,CAAhDA,UAAgD,CAAhDA,CAFF,CAAA,CAIA,GAAMC,CAAAA,KAAK,CAAGV,KAAK,CAALA,MAAAA,CAAd,IAAcA,CAAd,CACAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBW,UAAU,EAAIA,UAAU,CAAA,KAAA,CAAxBA,UAAwB,CAAxBA,CADFX,CAAAA,CAEG,CAAA,KAAA,CAAA,UAAA,CA7BA,UA6BA,CAFHA,EAKA,GAAIY,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAEE,GAAG,CAAEC,SAAS,CAAC,CAAA,KAAA,CAAD,GAAC,CAAD,CAFhB,CAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAKE,UAAU,CAAGR,oBAAAA,KAAD,QAAWD,CAAAA,eAAe,CALxC,KAKwC,CAA1B,EALd,CAME,YAAY,CAAGN,sBAAAA,KAAD,QAAWU,CAAAA,iBAAiB,CAN5C,KAM4C,CAA5B,EANhB,CAOE,YAAY,CAPd,SAAA,CAQE,YAAY,CARd,YAAA,CASE,KAAK,CAAEV,KATT,CAAA,CAAA,CADF,CA1CF,CAAA,CAyDA,cAAeE,CAAAA,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,aAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"module"}