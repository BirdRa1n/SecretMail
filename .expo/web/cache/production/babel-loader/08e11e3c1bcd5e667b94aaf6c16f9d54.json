{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks\";import{ModalContext}from\"./Context\";import Platform from\"react-native-web/dist/exports/Platform\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var ModalContent=function ModalContent(props,ref){var resolvedProps=usePropsResolution('ModalContent',props);var _React$useContext=React.useContext(ModalContext),contentSize=_React$useContext.contentSize,initialFocusRef=_React$useContext.initialFocusRef,finalFocusRef=_React$useContext.finalFocusRef,handleClose=_React$useContext.handleClose,visible=_React$useContext.visible;React.useEffect(function(){var finalRefVal=finalFocusRef?finalFocusRef.current:null;if(visible){if(initialFocusRef&&initialFocusRef.current){initialFocusRef.current.focus();}}else{if(finalRefVal){finalRefVal.focus();}}},[initialFocusRef,finalFocusRef,visible]);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},contentSize,resolvedProps,{ref:ref,onAccessibilityEscape:handleClose,\"aria-modal\":\"true\",accessibilityRole:Platform.OS==='web'?'dialog':undefined,accessibilityViewIsModal:true}));};export default memo(forwardRef(ModalContent));","map":{"version":3,"sources":["ModalContent.tsx"],"names":["ModalContent","resolvedProps","usePropsResolution","visible","React","finalRefVal","finalFocusRef","initialFocusRef","useHasResponsiveProps","Platform","memo","forwardRef"],"mappings":"uRAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,MAAA,CAAA,GAAA,4BACA,OAAA,kBAAA,sBACA,OAAA,YAAA,iB,6DAEA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAA,KAAA,CAAA,GAAA,CAAiC,CACpD,GAAMC,CAAAA,aAAa,CAAGC,kBAAkB,CAAA,cAAA,CAAxC,KAAwC,CAAxC,CACA,sBAMIE,KAAK,CAALA,UAAAA,CANJ,YAMIA,CANJ,CAAM,WAAN,mBAAM,WAAN,CAAM,eAAN,mBAAM,eAAN,CAAM,aAAN,mBAAM,aAAN,CAAM,WAAN,mBAAM,WAAN,CAKED,OALF,mBAKEA,OALF,CAOAC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMC,CAAAA,WAAW,CAAGC,aAAa,CAAGA,aAAa,CAAhB,OAAA,CAAjC,IAAA,CACA,GAAA,OAAA,CAAa,CACX,GAAIC,eAAe,EAAIA,eAAe,CAAtC,OAAA,CAAgD,CAE9CA,eAAe,CAAfA,OAAAA,CAAAA,KAAAA,GACD,CAJH,CAAA,IAKO,CACL,GAAA,WAAA,CAAiB,CAEfF,WAAW,CAAXA,KAAAA,GACD,CACF,CAZHD,CAAAA,CAaG,CAAA,eAAA,CAAA,aAAA,CAtBiD,OAsBjD,CAbHA,EAgBA,GAAII,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,CAAA,aAAA,CAAA,CAGE,GAAG,CAHL,GAAA,CAIE,qBAAqB,CAJvB,WAAA,CAME,aANF,MAAA,CAQE,iBAAiB,CAAEC,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,CAAAA,QAAAA,CARrB,SAAA,CASE,wBAAwB,CAAA,IAT1B,CAAA,CAAA,CADF,CA5BF,CAAA,CA2CA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,YAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n    visible,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        //@ts-ignore\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...resolvedProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]},"metadata":{},"sourceType":"module"}