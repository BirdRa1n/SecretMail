{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import React from'react';export var getResponsiveStylesImpl=function getResponsiveStylesImpl(width){return function(queries){if(typeof width==='number'){var styles=queries.initial?[StyleSheet.create({initial:StyleSheet.flatten(queries.initial)}).initial]:[];if(queries.query){queries.query.forEach(function(queryRule){if(queryRule.style){var flattenQueryStyle=StyleSheet.flatten(queryRule.style);if(typeof queryRule.maxWidth==='number'&&typeof queryRule.minWidth==='number'){if(width>=queryRule.minWidth&&width<=queryRule.maxWidth){styles.push(StyleSheet.create({rangeStyle:flattenQueryStyle}).rangeStyle);}}else if(typeof queryRule.minWidth==='number'){if(width>=queryRule.minWidth){styles.push(StyleSheet.create({minWidthStyle:flattenQueryStyle}).minWidthStyle);}}else if(typeof queryRule.maxWidth==='number'){if(width<=queryRule.maxWidth){styles.push(StyleSheet.create({maxWidthStyle:flattenQueryStyle}).maxWidthStyle);}}}});return{styles:styles};}}return{};};};export var useDimensionsWithEnable=function useDimensionsWithEnable(_ref){var enable=_ref.enable;var _React$useState=React.useState(function(){return Dimensions.get('window');}),_React$useState2=_slicedToArray(_React$useState,2),dimensions=_React$useState2[0],setDimensions=_React$useState2[1];React.useEffect(function(){if(enable){function handleChange(_ref2){var window=_ref2.window;if(dimensions.width!==window.width||dimensions.height!==window.height||dimensions.scale!==window.scale||dimensions.fontScale!==window.fontScale){setDimensions(window);}}Dimensions.addEventListener('change',handleChange);handleChange({window:Dimensions.get('window')});return function(){Dimensions.removeEventListener('change',handleChange);};}return function(){};},[dimensions,enable]);return dimensions;};","map":{"version":3,"sources":["common.ts"],"names":["getResponsiveStylesImpl","width","queries","styles","initial","StyleSheet","queryRule","flattenQueryStyle","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","React","Dimensions","window","dimensions","setDimensions","handleChange"],"mappings":"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","sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}