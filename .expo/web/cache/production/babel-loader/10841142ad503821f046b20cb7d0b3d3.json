{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"color\",\"size\",\"style\"];import React,{memo,forwardRef}from'react';import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import{usePropsResolution,useStyledSystemPropsResolver}from\"../../../hooks\";import{getColor}from\"../../../theme\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useTheme}from\"../../../hooks\";var Spinner=function Spinner(props,ref){var _usePropsResolution=usePropsResolution('Spinner',props),color=_usePropsResolution.color,size=_usePropsResolution.size,style=_usePropsResolution.style,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var resolvedColor=getColor(color,useTheme().colors,useTheme());var resolvedStyle=useStyledSystemPropsResolver(resolvedProps);if(useHasResponsiveProps(props)){return null;}return React.createElement(ActivityIndicator,{accessible:true,accessibilityLabel:\"loading\",color:resolvedColor,ref:ref,size:size,style:[resolvedStyle,style]});};export default memo(forwardRef(Spinner));","map":{"version":3,"sources":["index.tsx"],"names":["Spinner","resolvedProps","usePropsResolution","resolvedColor","getColor","useTheme","resolvedStyle","useStyledSystemPropsResolver","useHasResponsiveProps","memo","forwardRef"],"mappings":"4HAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,C,+EAEA,OAAA,kBAAA,CAAA,4BAAA,sBAIA,OAAA,QAAA,sBAEA,OAAA,qBAAA,4CACA,OAAA,QAAA,sBAEA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAA,KAAA,CAAA,GAAA,CAAoC,CAClD,wBAAiDE,kBAAkB,CAAA,SAAA,CAAnE,KAAmE,CAAnE,CAAM,KAAN,qBAAM,KAAN,CAAM,IAAN,qBAAM,IAAN,CAAM,KAAN,qBAAM,KAAN,CAA+BD,aAA/B,yDAIA,GAAME,CAAAA,aAAa,CAAGC,QAAQ,CAAA,KAAA,CAAQC,QAAQ,GAAhB,MAAA,CAA2BA,QAAzD,EAA8B,CAA9B,CACA,GAAMC,CAAAA,aAAa,CAAGC,4BAA4B,CANA,aAMA,CAAlD,CAEA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,CACE,UAAU,CADZ,IAAA,CAEE,kBAAkB,CAFpB,SAAA,CAGE,KAAK,CAHP,aAAA,CAIE,GAAG,CAJL,GAAA,CAKE,IAAI,CALN,IAAA,CAME,KAAK,CAAE,CAAA,aAAA,CAAA,KAAA,CANT,CAAA,CADF,CAXF,CAAA,CAuBA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,OAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport {\n  usePropsResolution,\n  useStyledSystemPropsResolver,\n} from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, style, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <ActivityIndicator\n      accessible\n      accessibilityLabel=\"loading\"\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n      style={[resolvedStyle, style]}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"module"}