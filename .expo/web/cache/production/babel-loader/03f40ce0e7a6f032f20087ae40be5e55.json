{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"columns\",\"space\",\"spacingX\",\"spacingY\",\"minChildWidth\",\"children\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import{Box,HStack,VStack}from\"../../primitives\";import{useThemeProps}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var DEBUG_STYLES=false?{rows:{borderWidth:'1px'},cols:{borderWidth:'1px'}}:{rows:{},cols:{}};var SimpleGrid=function SimpleGrid(props,ref){var _useThemeProps=useThemeProps('SimpleGrid',props),columns=_useThemeProps.columns,space=_useThemeProps.space,spacingX=_useThemeProps.spacingX,spacingY=_useThemeProps.spacingY,minChildWidth=_useThemeProps.minChildWidth,children=_useThemeProps.children,remainingProps=_objectWithoutProperties(_useThemeProps,_excluded);if(useHasResponsiveProps(props)){return React.createElement(React.Fragment,null);}var cellSpacing=space!==null&&space!==void 0?space:0;var cellSpacingX=spacingX!==null&&spacingX!==void 0?spacingX:cellSpacing;var cellSpacingY=spacingY!==null&&spacingY!==void 0?spacingY:cellSpacing;var childrenArray=React.Children.toArray(children);if(columns){var rowSlices=[];for(var i=0;i<childrenArray.length;i=i+columns){rowSlices.push(childrenArray.slice(i,i+columns));}return React.createElement(VStack,_extends({},DEBUG_STYLES.rows,{space:cellSpacingY},remainingProps,{ref:ref}),rowSlices.map(function(row,rowIndex){return React.createElement(HStack,{space:cellSpacingX,key:rowIndex},row.map(function(col){return React.createElement(Box,_extends({},DEBUG_STYLES.cols,{key:col.key}),col);}));}));}else if(minChildWidth){return React.createElement(Box,_extends({flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"center\"},remainingProps,{ref:ref}),childrenArray.map(function(col){return React.createElement(Box,_extends({},DEBUG_STYLES.cols,{mx:cellSpacingX,my:cellSpacingY,key:col.key,minWidth:minChildWidth}),col);}));}return React.createElement(React.Fragment,null);};export default React.memo(React.forwardRef(SimpleGrid));","map":{"version":3,"sources":["SimpleGrid.tsx"],"names":["DEBUG_STYLES","rows","borderWidth","cols","SimpleGrid","remainingProps","useThemeProps","useHasResponsiveProps","cellSpacing","space","cellSpacingX","spacingX","cellSpacingY","spacingY","childrenArray","React","rowSlices","i","ref","rowIndex","col","key","minChildWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        borderWidth: '1px',\n      },\n      cols: {\n        borderWidth: '1px',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return <></>;\n  }\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]},"metadata":{},"sourceType":"module"}