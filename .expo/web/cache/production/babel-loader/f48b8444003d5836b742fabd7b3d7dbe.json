{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useFormControlContext}from\"./useFormControl\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{combineContextAndProps}from\"../../../utils\";var FormControlHelperText=function FormControlHelperText(props,ref){var formControlContext=useFormControlContext();var combinedProps=combineContextAndProps(formControlContext,props);var resolvedProps=usePropsResolution('FormControlHelperText',combinedProps,{isDisabled:combinedProps.isDisabled,isReadOnly:combinedProps.isReadOnly,isInvalid:combinedProps.isInvalid});React.useEffect(function(){resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.setHasHelpText(true);return function(){resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.setHasHelpText(false);};});if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},resolvedProps,{nativeID:resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.feedbackId,ref:ref}));};export default memo(forwardRef(FormControlHelperText));","map":{"version":3,"sources":["FormControlHelperText.tsx"],"names":["FormControlHelperText","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","resolvedProps","usePropsResolution","isDisabled","isReadOnly","isInvalid","React","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":"uRAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,MAAA,CAAA,GAAA,4BACA,OAAA,kBAAA,oCACA,OAAA,qBAAA,wBAEA,OAAA,qBAAA,4CACA,OAAA,sBAAA,sBAEA,GAAMA,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAAA,KAAA,CAAA,GAAA,CAGzB,CACH,GAAMC,CAAAA,kBAAkB,CAAGC,qBAA3B,EAAA,CACA,GAAMC,CAAAA,aAAa,CAAGC,sBAAsB,CAAA,kBAAA,CAA5C,KAA4C,CAA5C,CACA,GAAMC,CAAAA,aAAa,CAAGC,kBAAkB,CAAA,uBAAA,CAAA,aAAA,CAGtC,CACEC,UAAU,CAAEJ,aAAa,CAD3B,UAAA,CAEEK,UAAU,CAAEL,aAAa,CAF3B,UAAA,CAGEM,SAAS,CAAEN,aAAa,CAH1B,SAAA,CAHsC,CAAxC,CAWAO,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBL,aAAa,GAAbA,IAAAA,EAAAA,aAAa,GAAA,IAAbA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,aAAa,CAAbA,cAAAA,CAAAA,IAAAA,CAAAA,CACA,MAAO,WAAM,CACXA,aAAa,GAAbA,IAAAA,EAAAA,aAAa,GAAA,IAAbA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,aAAa,CAAbA,cAAAA,CAAAA,KAAAA,CAAAA,CADF,CAAA,CAhBC,CAcHK,EAOA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,CAAwB,QAAQ,CAAEN,aAAF,GAAA,IAAEA,EAAAA,aAAF,GAAA,IAAA,EAAEA,CAAF,IAAA,EAAEA,CAAAA,aAAa,CAA/C,UAAA,CAA6D,GAAG,CAAEO,GAAlE,CAAA,CAAA,CADF,CA5BF,CAAA,CAiCA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,qBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]},"metadata":{},"sourceType":"module"}