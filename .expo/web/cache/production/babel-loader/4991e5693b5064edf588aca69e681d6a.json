{"ast":null,"code":"import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import{getClosestBreakpoint,hasValidBreakpointFormat,findLastValidBreakpoint}from\"../theme/tools\";import{useTheme}from\"./../hooks/useTheme\";export function useBreakpointValue(values){var _useWindowDimensions;var windowWidth=(_useWindowDimensions=useWindowDimensions())===null||_useWindowDimensions===void 0?void 0:_useWindowDimensions.width;var theme=useTheme();if(hasValidBreakpointFormat(values,theme.breakpoints)){var currentBreakpoint=getClosestBreakpoint(theme.breakpoints,windowWidth);return findLastValidBreakpoint(values,theme.breakpoints,currentBreakpoint);}else{return values;}}","map":{"version":3,"sources":["useBreakpointValue.ts"],"names":["windowWidth","useWindowDimensions","theme","useTheme","hasValidBreakpointFormat","currentBreakpoint","getClosestBreakpoint","findLastValidBreakpoint"],"mappings":"mFACA,OAAA,oBAAA,CAAA,wBAAA,CAAA,uBAAA,sBAKA,OAAA,QAAA,2BAOA,MAAO,SAAA,CAAA,kBAAA,CAAA,MAAA,CAA6D,CAAA,GAAA,CAAA,oBAAA,CAClE,GAAIA,CAAAA,WAAW,CAAA,CAAA,oBAAA,CAAGC,mBAAH,EAAA,IAAA,IAAA,EAAA,oBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGA,oBAAAA,CAAlB,KAAA,CACA,GAAMC,CAAAA,KAAK,CAAGC,QAAd,EAAA,CAEA,GAAIC,wBAAwB,CAAA,MAAA,CAASF,KAAK,CAA1C,WAA4B,CAA5B,CAAyD,CACvD,GAAIG,CAAAA,iBAAiB,CAAGC,oBAAoB,CAC1CJ,KAAK,CADqC,WAAA,CAA5C,WAA4C,CAA5C,CAIA,MAAOK,CAAAA,uBAAuB,CAAA,MAAA,CAE5BL,KAAK,CAFuB,WAAA,CAA9B,iBAA8B,CAA9B,CALF,CAAA,IAUO,CACL,MAAA,CAAA,MAAA,CACD,CACF","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\nimport type { ITheme } from '../theme/index';\n\ntype UseBreakpointValueParam =\n  | { [key in keyof ITheme['breakpoints']]?: any }\n  | Array<any>;\n\nexport function useBreakpointValue(values: UseBreakpointValueParam) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(\n      values,\n      theme.breakpoints,\n      currentBreakpoint\n    );\n  } else {\n    return values;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}