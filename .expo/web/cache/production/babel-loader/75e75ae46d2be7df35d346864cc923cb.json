{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"startColor\",\"endColor\",\"lines\",\"isLoaded\",\"_line\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{usePropsResolution}from\"../../../hooks\";import{Stack}from\"../../primitives/Stack\";import Skeleton from\"./Skeleton\";var SkeletonText=function SkeletonText(props,ref){var _usePropsResolution=usePropsResolution('SkeletonText',props),children=_usePropsResolution.children,startColor=_usePropsResolution.startColor,endColor=_usePropsResolution.endColor,lines=_usePropsResolution.lines,isLoaded=_usePropsResolution.isLoaded,_line=_usePropsResolution._line,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var computedChildren=[];for(var i=0;i<lines;i++){if(i===lines-1&&lines!==1){computedChildren.push(React.createElement(Skeleton,_extends({key:i,endColor:endColor,startColor:startColor,w:\"75%\"},_line)));}else computedChildren.push(React.createElement(Skeleton,_extends({key:i,endColor:endColor,startColor:startColor},_line)));}return isLoaded?children:React.createElement(Stack,_extends({},resolvedProps,{ref:ref}),computedChildren);};export default memo(forwardRef(SkeletonText));","map":{"version":3,"sources":["SkeletonText.tsx"],"names":["SkeletonText","resolvedProps","usePropsResolution","computedChildren","i","lines","startColor","isLoaded","ref","memo","forwardRef"],"mappings":"0bAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,kBAAA,sBACA,OAAA,KAAA,8BACA,MAAA,CAAA,QAAA,kBAGA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAA,KAAA,CAAA,GAAA,CAIhB,CAEH,wBAQIE,kBAAkB,CAAA,cAAA,CARtB,KAQsB,CARtB,CAAM,QAAN,qBAAM,QAAN,CAAM,UAAN,qBAAM,UAAN,CAAM,QAAN,qBAAM,QAAN,CAAM,KAAN,qBAAM,KAAN,CAAM,QAAN,qBAAM,QAAN,CAAM,KAAN,qBAAM,KAAN,CAOKD,aAPL,yDAUA,GAAME,CAAAA,gBAAgB,CAZnB,EAYH,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAV,CAAA,CAAgBA,CAAC,CAAjB,KAAA,CAA2BA,CAA3B,EAAA,CAAgC,CAE9B,GAAIA,CAAC,GAAKC,KAAK,CAAXD,CAAAA,EAAmBC,KAAK,GAA5B,CAAA,CAAoC,CAClCF,gBAAgB,CAAhBA,IAAAA,CAEE,KAAA,CAAA,aAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CACE,GAAG,CADL,CAAA,CAEE,QAAQ,CAFV,QAAA,CAGE,UAAU,CAHZ,UAAA,CAIE,CAAC,CAAC,KAJJ,CAAA,CAFFA,KAEE,CAAA,CAFFA,EADF,CAAA,IAYEA,CAAAA,gBAAgB,CAAhBA,IAAAA,CACE,KAAA,CAAA,aAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CACE,GAAG,CADL,CAAA,CAEE,QAAQ,CAFV,QAAA,CAGE,UAAU,CAAEG,UAHd,CAAA,CADFH,KACE,CAAA,CADFA,EAQH,CACD,MAAOI,CAAAA,QAAQ,CAAA,QAAA,CAGb,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,CAA0B,GAAG,CAAEC,GAA/B,CAAA,CAAA,CAHF,gBAGE,CAHF,CAzCF,CAAA,CAkDA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,YAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Stack } from '../../primitives/Stack';\nimport Skeleton from './Skeleton';\nimport type { ISkeletonTextProps } from './types';\n\nconst SkeletonText = (\n  //@ts-ignore\n  props: ISkeletonTextProps,\n  ref: any\n) => {\n  // const { children, ...props } = allProps;\n  const {\n    children,\n    startColor,\n    endColor,\n    lines,\n    isLoaded,\n    _line,\n    ...resolvedProps\n  } = usePropsResolution('SkeletonText', props);\n\n  const computedChildren = [];\n  //generating an array of skeleton components (same length as noOfLines)\n  for (let i = 0; i < lines; i++) {\n    //check for last line (to change the width of last line)\n    if (i === lines - 1 && lines !== 1) {\n      computedChildren.push(\n        //Using Skeleton component with required props\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          w=\"75%\"\n          {..._line}\n        />\n      );\n    } else\n      computedChildren.push(\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          {..._line}\n        />\n      );\n  }\n  return isLoaded ? (\n    children\n  ) : (\n    <Stack {...resolvedProps} ref={ref}>\n      {computedChildren}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(SkeletonText));\n"]},"metadata":{},"sourceType":"module"}