{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Box}from\"../../primitives\";import{WarningIcon,WarningTwoIcon,InfoIcon,CheckCircleIcon}from\"../../primitives/Icon/Icons\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{AlertContext}from\"./Context\";import{omitUndefined}from\"../../../theme/tools/utils\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var AlertIcon=function AlertIcon(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var newProps=usePropsResolution('AlertIcon',props);newProps=omitUndefined(newProps);var _React$useContext=React.useContext(AlertContext),status=_React$useContext.status,_icon=_React$useContext._icon;var getIcon=function getIcon(){switch(status){case'error':return React.createElement(WarningTwoIcon,_extends({},_icon,newProps,{ref:ref}));case'warning':return React.createElement(WarningIcon,_extends({},_icon,newProps,{ref:ref}));case'success':return React.createElement(CheckCircleIcon,_extends({},_icon,newProps,{ref:ref}));default:return React.createElement(InfoIcon,_extends({},_icon,newProps,{ref:ref}));}};if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,null,children||getIcon());};export default memo(forwardRef(AlertIcon));","map":{"version":3,"sources":["AlertIcon.tsx"],"names":["AlertIcon","props","newProps","usePropsResolution","omitUndefined","_icon","React","getIcon","ref","useHasResponsiveProps","children","memo","forwardRef"],"mappings":"uYAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,GAAA,wBACA,OAAA,WAAA,CAAA,cAAA,CAAA,QAAA,CAAA,eAAA,mCAOA,OAAA,kBAAA,oCACA,OAAA,YAAA,iBACA,OAAA,aAAA,kCACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAA,GAAA,CAAwD,IAAvD,CAAA,QAAuD,MAAvD,QAAuD,CAAxCC,KAAwC,0CACxE,GAAIC,CAAAA,QAAQ,CAAGC,kBAAkB,CAAA,WAAA,CAAjC,KAAiC,CAAjC,CACAD,QAAQ,CAAGE,aAAa,CAAxBF,QAAwB,CAAxBA,CACA,sBAAyCI,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC,CAAM,MAAN,mBAAM,MAAN,CAAgBD,KAAhB,mBAAgBA,KAAhB,CACA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,OAAA,MAAA,EACE,IAAA,OAAA,CACE,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,cAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAyC,GAAG,CAAEC,GAA9C,CAAA,CAAA,CAAP,CACF,IAAA,SAAA,CACE,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,WAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAsC,GAAG,CAAEA,GAA3C,CAAA,CAAA,CAAP,CACF,IAAA,SAAA,CACE,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,eAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAA0C,GAAG,CAAEA,GAA/C,CAAA,CAAA,CAAP,CACF,QACE,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAmC,GAAG,CAAEA,GAAxC,CAAA,CAAA,CAAP,CARJ,CALsE,CAIxE,CAaA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,IAAA,CAAMC,QAAQ,EAAIH,OAAzB,EAAO,CAAP,CApBF,CAAA,CAsBA,cAAeI,CAAAA,IAAI,CAACC,UAAU,CAA9B,SAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport {\n  WarningIcon,\n  WarningTwoIcon,\n  InfoIcon,\n  CheckCircleIcon,\n} from '../../primitives/Icon/Icons';\nimport type { IAlertContext, IAlertIconProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { AlertContext } from './Context';\nimport { omitUndefined } from '../../../theme/tools/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertIcon = ({ children, ...props }: IAlertIconProps, ref?: any) => {\n  let newProps = usePropsResolution('AlertIcon', props);\n  newProps = omitUndefined(newProps);\n  const { status, _icon }: IAlertContext = React.useContext(AlertContext);\n  const getIcon = () => {\n    switch (status) {\n      case 'error':\n        return <WarningTwoIcon {..._icon} {...newProps} ref={ref} />;\n      case 'warning':\n        return <WarningIcon {..._icon} {...newProps} ref={ref} />;\n      case 'success':\n        return <CheckCircleIcon {..._icon} {...newProps} ref={ref} />;\n      default:\n        return <InfoIcon {..._icon} {...newProps} ref={ref} />;\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box>{children || getIcon()}</Box>;\n};\nexport default memo(forwardRef(AlertIcon));\n"]},"metadata":{},"sourceType":"module"}