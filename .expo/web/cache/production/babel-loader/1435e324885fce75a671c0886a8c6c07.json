{"ast":null,"code":"function murmurhash2_32_gc(str,seed){var l=str.length,h=seed^l,i=0,k;while(l>=4){k=str.charCodeAt(i)&0xff|(str.charCodeAt(++i)&0xff)<<8|(str.charCodeAt(++i)&0xff)<<16|(str.charCodeAt(++i)&0xff)<<24;k=(k&0xffff)*0x5bd1e995+(((k>>>16)*0x5bd1e995&0xffff)<<16);k^=k>>>24;k=(k&0xffff)*0x5bd1e995+(((k>>>16)*0x5bd1e995&0xffff)<<16);h=(h&0xffff)*0x5bd1e995+(((h>>>16)*0x5bd1e995&0xffff)<<16)^k;l-=4;++i;}switch(l){case 3:h^=(str.charCodeAt(i+2)&0xff)<<16;case 2:h^=(str.charCodeAt(i+1)&0xff)<<8;case 1:h^=str.charCodeAt(i)&0xff;h=(h&0xffff)*0x5bd1e995+(((h>>>16)*0x5bd1e995&0xffff)<<16);}h^=h>>>13;h=(h&0xffff)*0x5bd1e995+(((h>>>16)*0x5bd1e995&0xffff)<<16);h^=h>>>15;return h>>>0;}var hash=function hash(str){return murmurhash2_32_gc(str,1).toString(36);};export default hash;","map":{"version":3,"sources":["hash.ts"],"names":["l","str","h","seed","i","k","hash","murmurhash2_32_gc"],"mappings":"AAeA,QAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,IAAA,CAAsD,CACpD,GAAIA,CAAAA,CAAC,CAAGC,GAAG,CAAX,MAAA,CACEC,CAAC,CAAGC,IAAI,CADV,CAAA,CAEEC,CAAC,CAFH,CAAA,CAAA,CAAA,CAKA,MAAOJ,CAAC,EAAR,CAAA,CAAe,CACbK,CAAC,CACEJ,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,EAAD,IAACA,CACA,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,EAAD,IAAA,GADD,CAACA,CAEA,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,EAAD,IAAA,GAFD,EAACA,CAGA,CAACA,GAAG,CAAHA,UAAAA,CAAe,EAAfA,CAAAA,EAAD,IAAA,GAJHI,EAAAA,CAKAA,CAAC,CACC,CAACA,CAAC,CAAF,MAAA,EAAA,UAAA,EAA6B,CAAE,CAACA,CAAC,GAAF,EAAA,EAAD,UAAC,CAAF,MAAA,GAD/BA,EACE,CADFA,CAEAA,CAAC,EAAIA,CAAC,GAANA,EAAAA,CACAA,CAAC,CACC,CAACA,CAAC,CAAF,MAAA,EAAA,UAAA,EAA6B,CAAE,CAACA,CAAC,GAAF,EAAA,EAAD,UAAC,CAAF,MAAA,GAD/BA,EACE,CADFA,CAEAH,CAAC,CACE,CAACA,CAAC,CAAF,MAAA,EAAA,UAAA,EACE,CAAE,CAACA,CAAC,GAAF,EAAA,EAAD,UAAC,CAAF,MAAA,GADH,EAAC,EADHA,CAAAA,CAIAF,CAAC,EAADA,CAAAA,CACA,EAAA,CAAA,CACD,CAED,OAAA,CAAA,EACE,IAAA,EAAA,CACEE,CAAC,EAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,CAAhBH,CAAAA,EAAD,IAAA,GAALC,EAAAA,CAEF,IAAA,EAAA,CACEA,CAAC,EAAI,CAACD,GAAG,CAAHA,UAAAA,CAAeG,CAAC,CAAhBH,CAAAA,EAAD,IAAA,GAALC,CAAAA,CAEF,IAAA,EAAA,CACEA,CAAC,EAAID,GAAG,CAAHA,UAAAA,CAAAA,CAAAA,EAALC,IAAAA,CACAA,CAAC,CACC,CAACA,CAAC,CAAF,MAAA,EAAA,UAAA,EACC,CAAE,CAACA,CAAC,GAAF,EAAA,EAAD,UAAC,CAAF,MAAA,GAFHA,EACE,CADFA,CATJ,CAcAA,CAAC,EAAIA,CAAC,GAANA,EAAAA,CACAA,CAAC,CAAG,CAACA,CAAC,CAAF,MAAA,EAAA,UAAA,EAA6B,CAAE,CAACA,CAAC,GAAF,EAAA,EAAD,UAAC,CAAF,MAAA,GAAjCA,EAAI,CAAJA,CACAA,CAAC,EAAIA,CAAC,GAANA,EAAAA,CACA,MAAOA,CAAAA,CAAC,GAAR,CAAA,CACD,CAED,GAAMI,CAAAA,IAAI,CAAG,QAAA,CAAA,IAAA,CAAA,GAAA,CAA2B,CACtC,MAAOC,CAAAA,iBAAiB,CAAA,GAAA,CAAjBA,CAAiB,CAAjBA,CAAAA,QAAAA,CAAP,EAAOA,CAAP,CADF,CAAA,CAIA,cAAA,CAAA,IAAA","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This hash function is taken from react native web\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction murmurhash2_32_gc(str: string, seed: number) {\n  var l = str.length,\n    h = seed ^ l,\n    i = 0,\n    k;\n\n  while (l >= 4) {\n    k =\n      (str.charCodeAt(i) & 0xff) |\n      ((str.charCodeAt(++i) & 0xff) << 8) |\n      ((str.charCodeAt(++i) & 0xff) << 16) |\n      ((str.charCodeAt(++i) & 0xff) << 24);\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    k ^= k >>> 24;\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    h =\n      ((h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^\n      k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h =\n        (h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nconst hash = function hash(str: string) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nexport default hash;\n"]},"metadata":{},"sourceType":"module"}