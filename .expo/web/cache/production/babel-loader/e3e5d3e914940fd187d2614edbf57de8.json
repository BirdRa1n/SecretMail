{"ast":null,"code":"import{useTheme}from\"./useTheme\";import get from'lodash.get';export function useToken(property,token,fallback){var theme=useTheme();if(Array.isArray(token)){var fallbackArr=[];if(fallback){fallbackArr=Array.isArray(fallback)?fallback:[fallback];}return token.map(function(innerToken,index){var _fallbackArr$index;var path=\"\".concat(property,\".\").concat(innerToken);return get(theme,path,(_fallbackArr$index=fallbackArr[index])!==null&&_fallbackArr$index!==void 0?_fallbackArr$index:innerToken);});}var path=\"\".concat(property,\".\").concat(token);return get(theme,path,fallback!==null&&fallback!==void 0?fallback:token);}","map":{"version":3,"sources":["useToken.ts"],"names":["theme","useTheme","Array","fallbackArr","path","get","fallback"],"mappings":"AAAA,OAAA,QAAA,kBACA,MAAA,CAAA,GAAA,KAAA,YAAA,CAEA,MAAO,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAIL,CACA,GAAMA,CAAAA,KAAK,CAAGC,QAAd,EAAA,CACA,GAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,CAA0B,CACxB,GAAIC,CAAAA,WAAgB,CAApB,EAAA,CACA,GAAA,QAAA,CAAc,CACZA,WAAW,CAAGD,KAAK,CAALA,OAAAA,CAAAA,QAAAA,EAAAA,QAAAA,CAAqC,CAAnDC,QAAmD,CAAnDA,CACD,CACD,MAAO,CAAA,KAAK,CAAL,GAAA,CAAU,SAAA,UAAA,CAAA,KAAA,CAAuB,CAAA,GAAA,CAAA,kBAAA,CACtC,GAAMC,CAAAA,IAAI,CAAA,GAAA,MAAA,CAAA,QAAA,CAAA,GAAA,EAAA,MAAA,CAAV,UAAU,CAAV,CACA,MAAOC,CAAAA,GAAG,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,kBAAA,CAAcF,WAAW,CAAzB,KAAyB,CAAzB,IAAA,IAAA,EAAA,kBAAA,GAAA,IAAA,EAAA,CAAA,kBAAA,CAAV,UAAU,CAAV,CAFF,CAAO,CAAP,CAID,CAED,GAAMC,CAAAA,IAAI,CAAA,GAAA,MAAA,CAAA,QAAA,CAAA,GAAA,EAAA,MAAA,CAAV,KAAU,CAAV,CACA,MAAOC,CAAAA,GAAG,CAAA,KAAA,CAAA,IAAA,CAAcC,QAAd,GAAA,IAAcA,EAAAA,QAAd,GAAA,IAAA,EAAcA,CAAd,QAAcA,CAAxB,KAAU,CAAV,CACD","sourcesContent":["import { useTheme } from './useTheme';\nimport get from 'lodash.get';\n\nexport function useToken<T extends string | number>(\n  property: string,\n  token: T | T[],\n  fallback?: T | T[]\n) {\n  const theme = useTheme();\n  if (Array.isArray(token)) {\n    let fallbackArr: T[] = [];\n    if (fallback) {\n      fallbackArr = Array.isArray(fallback) ? fallback : [fallback];\n    }\n    return token.map((innerToken, index) => {\n      const path = `${property}.${innerToken}`;\n      return get(theme, path, fallbackArr[index] ?? innerToken);\n    });\n  }\n\n  const path = `${property}.${token}`;\n  return get(theme, path, fallback ?? token);\n}\n"]},"metadata":{},"sourceType":"module"}