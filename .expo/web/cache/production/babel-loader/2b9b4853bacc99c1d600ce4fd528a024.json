{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React,{useState,useEffect}from'react';import{HybridContext}from\"./../hybrid-overlay/Context\";import useColorScheme from\"react-native-web/dist/exports/useColorScheme\";export var useColorMode=function useColorMode(){var _React$useContext=React.useContext(HybridContext),colorModeContext=_React$useContext.colorMode;if(colorModeContext===undefined){throw new Error('useColorMode must be used within a NativeBaseProvider');}return colorModeContext;};export function useColorModeValue(light,dark){var _useColorMode=useColorMode(),colorMode=_useColorMode.colorMode;return colorMode==='dark'?dark:light;}export function useModeManager(initialColorMode,useSystemColorMode,colorModeManager){var systemColorMode=useColorScheme();if(useSystemColorMode){initialColorMode=systemColorMode;}var _useState=useState(initialColorMode),_useState2=_slicedToArray(_useState,2),colorMode=_useState2[0],setRawMode=_useState2[1];var setColorMode=React.useCallback(function _callee(val){return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!colorModeManager){_context.next=3;break;}_context.next=3;return _regeneratorRuntime.awrap(colorModeManager.set(val));case 3:setRawMode(val);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);},[colorModeManager]);useEffect(function(){if(colorModeManager){(function getMode(){var value;return _regeneratorRuntime.async(function getMode$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));case 2:value=_context2.sent;if(value&&value!==colorMode){setRawMode(value);}case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);})();}},[colorMode,initialColorMode,colorModeManager]);useEffect(function(){if(!colorModeManager&&useSystemColorMode){setRawMode(systemColorMode);}},[systemColorMode,colorModeManager,useSystemColorMode,setRawMode]);return{colorMode:colorMode,setColorMode:setColorMode};}export function useAccessibleColors(){var _React$useContext2=React.useContext(HybridContext),colorModeContext=_React$useContext2.colorMode;var toggleAccessibleColors=function toggleAccessibleColors(){return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);};return[colorModeContext.accessibleColors,colorModeContext.setAccessibleColors,toggleAccessibleColors];}","map":{"version":3,"sources":["hooks.tsx"],"names":["useColorMode","colorMode","colorModeContext","React","systemColorMode","useColorScheme","initialColorMode","useState","setColorMode","colorModeManager","setRawMode","useEffect","value","toggleAccessibleColors"],"mappings":"6HAAA,MAAA,CAAA,KAAA,EAAA,QAAA,CAAA,SAAA,KAAA,OAAA,CAMA,OAAA,aAAA,mC,yEAIA,MAAO,IAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAA8B,CACxD,sBAIIG,KAAK,CAALA,UAAAA,CAJJ,aAIIA,CAJJ,CACaD,gBADb,mBACED,SADF,CAKA,GAAIC,gBAAgB,GAApB,SAAA,CAAoC,CAClC,KAAM,IAAA,CAAA,KAAA,CAAN,uDAAM,CAAN,CACD,CACD,MAAA,CAAA,gBAAA,CATK,CAAA,CAYP,MAAO,SAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,CAAkD,CACvD,kBAAsBF,YAAtB,EAAA,CAAQC,SAAR,eAAQA,SAAR,CACA,MAAOA,CAAAA,SAAS,GAATA,MAAAA,CAAAA,IAAAA,CAAP,KAAA,CACD,CAED,MAAO,SAAA,CAAA,cAAA,CAAA,gBAAA,CAAA,kBAAA,CAAA,gBAAA,CAIL,CACA,GAAMG,CAAAA,eAAe,CAAGC,cAAxB,EAAA,CAEA,GAAA,kBAAA,CAAwB,CACtBC,gBAAgB,CAAhBA,eAAAA,CACD,CAED,cAAgCC,QAAQ,CAAxC,gBAAwC,CAAxC,wCAAM,SAAN,eAAM,UAAN,eACA,GAAMC,CAAAA,YAAY,CAAG,KAAK,CAAL,WAAA,CACnB,iBAAA,GAAA,uHACE,gBADF,0EAEUC,gBAAgB,CAAhBA,GAAAA,CAAN,GAAMA,CAFV,SAIEC,UAAU,CAAVA,GAAU,CAAVA,CAJF,qEADmB,CAOnB,CAfF,gBAeE,CAPmB,CAArB,CAWAC,SAAS,CAAC,UAAM,CACd,GAAA,gBAAA,CAAsB,CACpB,CAAC,QAAA,CAAA,OAAA,mLACmBF,gBAAgB,CAAhBA,GAAAA,CAAlB,gBAAkBA,CADnB,SACKG,KADL,gBAEC,GAAIA,KAAK,EAAIA,KAAK,GAAlB,SAAA,CAAkC,CAChCF,UAAU,CAAVA,KAAU,CAAVA,CACD,CAJF,sEAAD,IAMD,CARM,CAAA,CASN,CAAA,SAAA,CAAA,gBAAA,CA5BH,gBA4BG,CATM,CAATC,CAYAA,SAAS,CAAC,UAAM,CACd,GAAI,CAAA,gBAAA,EAAJ,kBAAA,CAA6C,CAC3CD,UAAU,CAAVA,eAAU,CAAVA,CACD,CAHM,CAAA,CAIN,CAAA,eAAA,CAAA,gBAAA,CAAA,kBAAA,CAJHC,UAIG,CAJM,CAATA,CAMA,MAAO,CAAEV,SAAF,CAAEA,SAAF,CAAaO,YAAAA,CAAAA,YAAb,CAAP,CACD,CAED,MAAO,SAAA,CAAA,mBAAA,EAIL,CACA,uBAIIL,KAAK,CAALA,UAAAA,CAJJ,aAIIA,CAJJ,CACaD,gBADb,oBACED,SADF,CAKA,GAAMY,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,SAC7BX,CAAAA,gBAAgB,CAAhBA,mBAAAA,CAAqC,CAACA,gBAAgB,CADxD,gBACEA,CAD6B,EAA/B,CAEA,MAAO,CACLA,gBAAgB,CADX,gBAAA,CAELA,gBAAgB,CAFX,mBAAA,CAAP,sBAAO,CAAP,CAKD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { useColorScheme } from 'react-native';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}