{"ast":null,"code":"import React from'react';import{SafeAreaProvider,initialWindowMetrics as defaultInitialWindowMetrics}from'react-native-safe-area-context';import{SSRProvider}from'@react-native-aria/utils';import{theme as defaultTheme}from\"./../theme\";import HybridProvider from\"./hybrid-overlay/HybridProvider\";import{OverlayProvider}from'@react-native-aria/overlays';import{ToastProvider,ToastRef}from\"../components/composites/Toast\";import{defaultConfig,NativeBaseConfigProvider}from\"./NativeBaseContext\";import{useToast}from\"../components/composites/Toast\";import Platform from\"react-native-web/dist/exports/Platform\";import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import{getClosestBreakpoint,platformSpecificSpaceUnits}from\"../theme/tools/utils\";import{ResponsiveQueryProvider}from\"../utils/useResponsiveQuery\";var defaultInitialWindowMetricsBasedOnPlatform=Platform.select({web:{frame:{x:0,y:0,width:0,height:0},insets:{top:0,left:0,right:0,bottom:0}},default:defaultInitialWindowMetrics});var NativeBaseProvider=function NativeBaseProvider(props){var _config$theme,_useWindowDimensions;var colorModeManager=props.colorModeManager,_props$config=props.config,config=_props$config===void 0?defaultConfig:_props$config,children=props.children,_props$theme=props.theme,propsTheme=_props$theme===void 0?defaultTheme:_props$theme,initialWindowMetrics=props.initialWindowMetrics,isSSR=props.isSSR,disableContrastText=props.disableContrastText;var theme=(_config$theme=config.theme)!==null&&_config$theme!==void 0?_config$theme:propsTheme;var newTheme=React.useMemo(function(){if(config.enableRem){return platformSpecificSpaceUnits(theme);}return theme;},[config.enableRem,theme]);var windowWidth=(_useWindowDimensions=useWindowDimensions())===null||_useWindowDimensions===void 0?void 0:_useWindowDimensions.width;var currentBreakpoint=React.useMemo(function(){return getClosestBreakpoint(newTheme.breakpoints,windowWidth);},[windowWidth,newTheme.breakpoints]);return React.createElement(NativeBaseConfigProvider,{theme:newTheme,config:config,currentBreakpoint:currentBreakpoint,isSSR:isSSR,disableContrastText:disableContrastText},React.createElement(SafeAreaProvider,{initialMetrics:initialWindowMetrics!==null&&initialWindowMetrics!==void 0?initialWindowMetrics:defaultInitialWindowMetricsBasedOnPlatform},React.createElement(ResponsiveQueryProvider,{disableCSSMediaQueries:!isSSR},React.createElement(HybridProvider,{colorModeManager:colorModeManager,options:theme.config},React.createElement(OverlayProvider,null,React.createElement(ToastProvider,null,React.createElement(InitializeToastRef,null),React.createElement(SSRProvider,null,children)))))));};var InitializeToastRef=function InitializeToastRef(){var toast=useToast();ToastRef.current=toast;return null;};export{NativeBaseProvider};","map":{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["initialWindowMetrics","theme","defaultInitialWindowMetricsBasedOnPlatform","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","props","config","propsTheme","disableContrastText","newTheme","platformSpecificSpaceUnits","windowWidth","useWindowDimensions","currentBreakpoint","React","getClosestBreakpoint","isSSR","InitializeToastRef","toast","useToast","ToastRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"module"}