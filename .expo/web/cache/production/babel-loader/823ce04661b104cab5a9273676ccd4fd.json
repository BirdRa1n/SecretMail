{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as stateChangeTypes from\"./types\";import{getDefaultValue}from\"./utils\";export function useTypeaheadReducer(state,action){var type=action.type,props=action.props;var changes;switch(type){case stateChangeTypes.ItemClick:changes={isOpen:getDefaultValue(props,'isOpen'),selectedItem:props.items[action.index],inputValue:props.itemToString(props.items[action.index])};break;case stateChangeTypes.InputBlur:if(state.isOpen){changes={isOpen:false};}break;case stateChangeTypes.InputChange:changes={isOpen:true,inputValue:action.inputValue};break;case stateChangeTypes.ToggleButtonClick:case stateChangeTypes.FunctionToggleMenu:changes={isOpen:!state.isOpen};break;case stateChangeTypes.FunctionOpenMenu:changes={isOpen:true};break;case stateChangeTypes.FunctionCloseMenu:changes={isOpen:false};break;case stateChangeTypes.FunctionSelectItem:changes={selectedItem:action.selectedItem,inputValue:props.itemToString(action.selectedItem)};break;case stateChangeTypes.ControlledPropUpdatedSelectedItem:case stateChangeTypes.FunctionSetInputValue:changes={inputValue:action.inputValue};break;case stateChangeTypes.FunctionReset:changes={isOpen:getDefaultValue(props,'isOpen'),selectedItem:getDefaultValue(props,'selectedItem'),inputValue:getDefaultValue(props,'inputValue')};break;default:throw new Error('Reducer called without proper action type.');}return _objectSpread(_objectSpread({},state),changes);}","map":{"version":3,"sources":["reducer.tsx"],"names":["props","stateChangeTypes","changes","isOpen","getDefaultValue","selectedItem","action","inputValue","state"],"mappings":"w0BAAA,MAAO,GAAP,CAAA,gBAAA,eACA,OAAA,eAAA,eAQA,MAAO,SAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,MAAA,CAAyD,CAC9D,GAAM,CAAA,IAAN,CAAA,MAAA,CAAM,IAAN,CAAcA,KAAd,CAAA,MAAA,CAAcA,KAAd,CACA,GAAA,CAAA,OAAA,CAEA,OAAA,IAAA,EACE,IAAKC,CAAAA,gBAAgB,CAArB,SAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAEC,eAAe,CAAA,KAAA,CADf,QACe,CADf,CAERC,YAAY,CAAEL,KAAK,CAALA,KAAAA,CAAYM,MAAM,CAFxB,KAEMN,CAFN,CAGRO,UAAU,CAAEP,KAAK,CAALA,YAAAA,CAAmBA,KAAK,CAALA,KAAAA,CAAYM,MAAM,CAArCN,KAAmBA,CAAnBA,CAHJ,CAAVE,CAKA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,SAAA,CACE,GAAIO,KAAK,CAAT,MAAA,CAAkB,CAChBN,OAAO,CAAG,CACRC,MAAM,CAAE,KADA,CAAVD,CAGD,CACD,MACF,IAAKD,CAAAA,gBAAgB,CAArB,WAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CADE,IAAA,CAERI,UAAU,CAAED,MAAM,CAACC,UAFX,CAAVL,CAIA,MAEF,IAAKD,CAAAA,gBAAgB,CAArB,iBAAA,CACA,IAAKA,CAAAA,gBAAgB,CAArB,kBAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAE,CAACK,KAAK,CAACL,MADP,CAAVD,CAGA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,gBAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAE,IADA,CAAVD,CAGA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,iBAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAE,KADA,CAAVD,CAGA,MAEF,IAAKD,CAAAA,gBAAgB,CAArB,kBAAA,CACEC,OAAO,CAAG,CACRG,YAAY,CAAEC,MAAM,CADZ,YAAA,CAERC,UAAU,CAAEP,KAAK,CAALA,YAAAA,CAAmBM,MAAM,CAAzBN,YAAAA,CAFJ,CAAVE,CAIA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,iCAAA,CACA,IAAKA,CAAAA,gBAAgB,CAArB,qBAAA,CACEC,OAAO,CAAG,CACRK,UAAU,CAAED,MAAM,CAACC,UADX,CAAVL,CAGA,MACF,IAAKD,CAAAA,gBAAgB,CAArB,aAAA,CACEC,OAAO,CAAG,CACRC,MAAM,CAAEC,eAAe,CAAA,KAAA,CADf,QACe,CADf,CAERC,YAAY,CAAED,eAAe,CAAA,KAAA,CAFrB,cAEqB,CAFrB,CAGRG,UAAU,CAAEH,eAAe,CAAA,KAAA,CAAA,YAAA,CAHnB,CAAVF,CAKA,MACF,QACE,KAAM,IAAA,CAAA,KAAA,CAAN,4CAAM,CAAN,CA3DJ,CA8DA,sCAAO,KAAP,EAEKA,OAFL,EAID","sourcesContent":["import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\n\ntype IState = {\n  isOpen: boolean;\n  selectedItem: any;\n  inputValue: string;\n};\n\nexport function useTypeaheadReducer(state: IState, action: any) {\n  const { type, props } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      };\n      break;\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false,\n        };\n      }\n      break;\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue,\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n      };\n      break;\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n      };\n      break;\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem),\n      };\n      break;\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      };\n      break;\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return {\n    ...state,\n    ...changes,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}