{"ast":null,"code":"import _extends2 from\"@babel/runtime/helpers/extends\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef}from'react';import RNView from\"react-native-web/dist/exports/View\";import{usePropsResolution}from\"../../../hooks\";import{makeStyledComponent}from\"../../../utils/styled\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var StyledView=makeStyledComponent(RNView);export var View=forwardRef(function(props,ref){var _usePropsResolution=usePropsResolution('View',props),resolvedProps=_extends2({},_usePropsResolution);if(useHasResponsiveProps(props)){return null;}return React.createElement(StyledView,_extends({},resolvedProps,{ref:ref}));});","map":{"version":3,"sources":["View.tsx"],"names":["StyledView","makeStyledComponent","View","forwardRef","resolvedProps","usePropsResolution","useHasResponsiveProps","ref"],"mappings":"6UAAA,MAAA,CAAA,KAAA,EAAA,UAAA,KAAA,OAAA,C,uDAEA,OAAA,kBAAA,sBACA,OAAA,mBAAA,6BAEA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,UAAe,CAAGC,mBAAmB,CAA3C,MAA2C,CAA3C,CAEA,MAAO,IAAMC,CAAAA,IAAI,CAAGC,UAAU,CAAC,SAAA,KAAA,CAAA,GAAA,CAAiC,CAC9D,wBAA6BE,kBAAkB,CAAA,MAAA,CADe,KACf,CAA/C,CAAWD,aAAX,mCAEA,GAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,CAA+B,GAAG,CAAEC,GAApC,CAAA,CAAA,CAAP,CANK,CAAuB,CAAvB","sourcesContent":["import React, { forwardRef } from 'react';\nimport { View as RNView } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { IViewProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledView: any = makeStyledComponent(RNView);\n\nexport const View = forwardRef((props: IViewProps, ref: any) => {\n  const { ...resolvedProps } = usePropsResolution('View', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StyledView {...resolvedProps} ref={ref} />;\n});\n"]},"metadata":{},"sourceType":"module"}