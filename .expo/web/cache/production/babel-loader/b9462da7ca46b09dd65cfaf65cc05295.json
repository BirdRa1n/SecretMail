{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"wrapperRef\",\"isHovered\",\"isFocusVisible\"],_excluded2=[\"isInvalid\",\"isReadOnly\",\"isIndeterminate\"],_excluded3=[\"icon\",\"_interactionBox\",\"_icon\",\"_stack\",\"_text\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{mergeRefs}from\"../../../utils\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{Center}from\"../../composites/Center\";import{useFormControlContext}from\"../../composites/FormControl\";import Box from\"../Box\";import{useToggleState}from'@react-stately/toggle';import{VisuallyHidden}from'@react-aria/visually-hidden';import{CheckboxGroupContext}from\"./CheckboxGroup\";import{useHover}from'@react-native-aria/interactions';import{useCheckbox,useCheckboxGroupItem}from'@react-native-aria/checkbox';import{useFocusRing}from'@react-native-aria/focus';import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{extractInObject,stylingProps}from\"../../../theme/tools/utils\";import{combineContextAndProps}from\"../../../utils\";import SizedIcon from\"./SizedIcon\";import{Stack}from\"../Stack\";import{wrapStringChild}from\"../../../utils/wrapStringChild\";var Checkbox=function Checkbox(_ref2,ref){var wrapperRef=_ref2.wrapperRef,isHoveredProp=_ref2.isHovered,isFocusVisibleProp=_ref2.isFocusVisible,props=_objectWithoutProperties(_ref2,_excluded);var formControlContext=useFormControlContext();var _combineContextAndPro=combineContextAndProps(formControlContext,props),isInvalid=_combineContextAndPro.isInvalid,isReadOnly=_combineContextAndPro.isReadOnly,isIndeterminate=_combineContextAndPro.isIndeterminate,combinedProps=_objectWithoutProperties(_combineContextAndPro,_excluded2);var checkboxGroupContext=React.useContext(CheckboxGroupContext);var state=useToggleState(_objectSpread(_objectSpread({},props),{},{defaultSelected:props.defaultIsChecked,isSelected:props.isChecked}));var _ref=React.useRef();var mergedRef=mergeRefs([ref,_ref]);var _ref3=checkboxGroupContext?useCheckboxGroupItem(_objectSpread(_objectSpread({},combinedProps),{},{'aria-label':combinedProps.accessibilityLabel,'value':combinedProps.value}),checkboxGroupContext.state,mergedRef):useCheckbox(_objectSpread(_objectSpread({},combinedProps),{},{'aria-label':combinedProps.accessibilityLabel}),state,mergedRef),groupItemInputProps=_ref3.inputProps;var inputProps=React.useMemo(function(){return groupItemInputProps;},[groupItemInputProps.checked,groupItemInputProps.disabled,groupItemInputProps]);var _React$useState=React.useState(_objectSpread(_objectSpread({},checkboxGroupContext),combinedProps)),_React$useState2=_slicedToArray(_React$useState,1),contextCombinedProps=_React$useState2[0];return React.createElement(CheckboxComponent,{wrapperRef:wrapperRef,mergedRef:mergedRef,inputProps:inputProps,combinedProps:contextCombinedProps,isInvalid:isInvalid,isReadOnly:isReadOnly,isHovered:isHoveredProp,isIndeterminate:isIndeterminate,isFocusVisible:isFocusVisibleProp});};var CheckboxComponent=React.memo(function(_ref4){var wrapperRef=_ref4.wrapperRef,inputProps=_ref4.inputProps,combinedProps=_ref4.combinedProps,isInvalid=_ref4.isInvalid,isReadOnly=_ref4.isReadOnly,isIndeterminate=_ref4.isIndeterminate,mergedRef=_ref4.mergedRef,isHoveredProp=_ref4.isHovered,isFocusVisibleProp=_ref4.isFocusVisible;var _ref=React.useRef();var _useHover=useHover({},_ref),isHovered=_useHover.isHovered;var isChecked=inputProps.checked,isDisabled=inputProps.disabled;var _useFocusRing=useFocusRing(),focusProps=_useFocusRing.focusProps,isFocusVisible=_useFocusRing.isFocusVisible;var _usePropsResolution=usePropsResolution('Checkbox',combinedProps,{isInvalid:isInvalid,isReadOnly:isReadOnly,isFocusVisible:isFocusVisibleProp||isFocusVisible,isDisabled:isDisabled,isIndeterminate:isIndeterminate,isChecked:isChecked,isHovered:isHovered||isHoveredProp}),icon=_usePropsResolution.icon,_interactionBox=_usePropsResolution._interactionBox,_icon=_usePropsResolution._icon,_stack=_usePropsResolution._stack,_text=_usePropsResolution._text,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded3);var _extractInObject=extractInObject(resolvedProps,[].concat(_toConsumableArray(stylingProps.margin),_toConsumableArray(stylingProps.layout),_toConsumableArray(stylingProps.flexbox),_toConsumableArray(stylingProps.position),['_text'])),_extractInObject2=_slicedToArray(_extractInObject,2),layoutProps=_extractInObject2[0],nonLayoutProps=_extractInObject2[1];var component=React.useMemo(function(){return React.createElement(Stack,_extends({},_stack,layoutProps),React.createElement(Center,null,React.createElement(Box,_interactionBox),React.createElement(Center,nonLayoutProps,React.createElement(SizedIcon,{icon:icon,_icon:_icon,isChecked:isChecked}))),wrapStringChild(resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.children,_text));},[_icon,_stack,_text,_interactionBox,icon,isChecked,nonLayoutProps,layoutProps,resolvedProps===null||resolvedProps===void 0?void 0:resolvedProps.children]);var mergedWrapperRef=React.useMemo(function(){return mergeRefs([wrapperRef,_ref]);},[wrapperRef]);if(useHasResponsiveProps(resolvedProps)){return null;}return React.createElement(Box,{accessibilityRole:\"label\",ref:mergedWrapperRef},React.createElement(VisuallyHidden,null,React.createElement(\"input\",_extends({},inputProps,focusProps,{ref:mergedRef}))),component);});export default memo(forwardRef(Checkbox));","map":{"version":3,"sources":["Checkbox.web.tsx"],"names":["Checkbox","isHovered","isFocusVisible","props","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","checkboxGroupContext","React","state","useToggleState","defaultSelected","isSelected","isChecked","_ref","mergedRef","mergeRefs","inputProps","groupItemInputProps","useCheckboxGroupItem","value","useCheckbox","accessibilityLabel","isFocusVisibleProp","CheckboxComponent","useHover","checked","disabled","isDisabled","useFocusRing","resolvedProps","usePropsResolution","isInvalid","isReadOnly","isIndeterminate","isHoveredProp","extractInObject","stylingProps","component","wrapStringChild","mergedWrapperRef","useHasResponsiveProps","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]},"metadata":{},"sourceType":"module"}