{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"_current\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo}from'react';import{Icon}from\"../../primitives/Icon\";import{BreadcrumbItemContext}from\"./Context\";import{usePropsResolution}from\"../../../hooks/useThemeProps/usePropsResolution\";var BreadcrumbIcon=function BreadcrumbIcon(props,ref){var _React$useContext=React.useContext(BreadcrumbItemContext),isCurrent=_React$useContext.isCurrent;var _usePropsResolution=usePropsResolution('BreadcrumbIcon',props),children=_usePropsResolution.children,_current=_usePropsResolution._current,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);return React.createElement(Icon,_extends({ref:ref},isCurrent&&_current,resolvedProps),children);};export default memo(forwardRef(BreadcrumbIcon));","map":{"version":3,"sources":["BreadcrumbIcon.tsx"],"names":["BreadcrumbIcon","isCurrent","React","resolvedProps","usePropsResolution","ref","memo","forwardRef"],"mappings":"kZAAA,MAAA,CAAA,KAAA,EAAA,UAAA,CAAA,IAAA,KAAA,OAAA,CACA,OAAA,IAAA,6BAEA,OAAA,qBAAA,iBACA,OAAA,kBAAA,uDAGA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAA,KAAA,CAAA,GAAA,CAA4C,CACjE,sBAA8CE,KAAK,CAALA,UAAAA,CAA9C,qBAA8CA,CAA9C,CAAQD,SAAR,mBAAQA,SAAR,CAIA,wBAA+CG,kBAAkB,CAAA,gBAAA,CAAjE,KAAiE,CAAjE,CAAI,QAAJ,qBAAI,QAAJ,CAAI,QAAJ,qBAAI,QAAJ,CAA6BD,aAA7B,yDAIA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAM,GAAG,CAAEE,GAAX,CAAA,CAAqBJ,SAAS,EAA9B,QAAA,CAAA,aAAA,CAAA,CADF,QACE,CADF,CATF,CAAA,CAgBA,cAAeK,CAAAA,IAAI,CAACC,UAAU,CAA9B,cAA8B,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Icon } from '../../primitives/Icon';\nimport type { IBreadcrumbItemContext, IBreadcrumbIconProps } from './types';\nimport { BreadcrumbItemContext } from './Context';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\n\n// Add breadcrumbIcon as child of breadcrumbItem for implementaion of isCurrent prop\nconst BreadcrumbIcon = (props: IBreadcrumbIconProps, ref?: any) => {\n  const { isCurrent }: IBreadcrumbItemContext = React.useContext(\n    BreadcrumbItemContext\n  );\n\n  let { children, _current, ...resolvedProps } = usePropsResolution(\n    'BreadcrumbIcon',\n    props\n  );\n  return (\n    <Icon ref={ref} {...(isCurrent && _current)} {...resolvedProps}>\n      {children}\n    </Icon>\n  );\n};\n\nexport default memo(forwardRef(BreadcrumbIcon));\n"]},"metadata":{},"sourceType":"module"}