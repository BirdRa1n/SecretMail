{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"],_excluded2=[\"focusable\",\"stroke\",\"color\",\"size\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{useToken,usePropsResolution}from\"../../../hooks\";import{makeStyledComponent}from\"../../../utils/styled\";import{Svg,G}from\"./nbSvg\";import{questionOutlineIconPath}from\"./Icons/questionIconPath\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var SVG=makeStyledComponent(Svg);var SVGIcon=function SVGIcon(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var _usePropsResolution=usePropsResolution('Icon',props),focusable=_usePropsResolution.focusable,stroke=_usePropsResolution.stroke,color=_usePropsResolution.color,size=_usePropsResolution.size,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var strokeHex=useToken('colors',stroke||'');var colorHex=useToken('colors',color||'');if(useHasResponsiveProps(props)){return null;}return React.createElement(SVG,_extends({},resolvedProps,{size:size,color:colorHex,stroke:strokeHex,focusable:focusable,accessibilityRole:\"image\",ref:ref}),React.Children.count(children)>0?React.createElement(G,null,React.Children.map(children,function(child,i){var _child$key;return React.createElement(ChildPath,_extends({key:(_child$key=child===null||child===void 0?void 0:child.key)!==null&&_child$key!==void 0?_child$key:i,element:child},child===null||child===void 0?void 0:child.props));})):questionOutlineIconPath);};var ChildPath=function ChildPath(_ref2){var element=_ref2.element,fill=_ref2.fill,pathStroke=_ref2.stroke;var pathStrokeColor=useToken('colors',pathStroke||'');var fillColor=useToken('colors',fill||'');if(!element){return null;}return React.cloneElement(element,{fill:fillColor?fillColor:'currentColor',stroke:pathStrokeColor});};export default memo(forwardRef(SVGIcon));","map":{"version":3,"sources":["SVGIcon.tsx"],"names":["SVG","makeStyledComponent","SVGIcon","props","resolvedProps","usePropsResolution","strokeHex","useToken","stroke","colorHex","color","useHasResponsiveProps","ref","child","ChildPath","pathStroke","pathStrokeColor","fillColor","fill","memo","forwardRef"],"mappings":"wbAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,QAAA,CAAA,kBAAA,sBACA,OAAA,mBAAA,6BACA,OAAA,GAAA,CAAA,CAAA,eAEA,OAAA,uBAAA,gCACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,GAAG,CAAGC,mBAAmB,CAA/B,GAA+B,CAA/B,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAA,GAAA,CAAkD,IAAjD,CAAA,QAAiD,MAAjD,QAAiD,CAAlCC,KAAkC,0CAChE,wBAMIE,kBAAkB,CAAA,MAAA,CANtB,KAMsB,CANtB,CAAM,SAAN,qBAAM,SAAN,CAAM,MAAN,qBAAM,MAAN,CAAM,KAAN,qBAAM,KAAN,CAAM,IAAN,qBAAM,IAAN,CAKKD,aALL,0DAOA,GAAME,CAAAA,SAAS,CAAGC,QAAQ,CAAA,QAAA,CAAWC,MAAM,EAA3C,EAA0B,CAA1B,CACA,GAAMC,CAAAA,QAAQ,CAAGF,QAAQ,CAAA,QAAA,CAAWG,KAAK,EATuB,EASvC,CAAzB,CAEA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,CAYE,IAAI,CAZN,IAAA,CAaE,KAAK,CAbP,QAAA,CAcE,MAAM,CAdR,SAAA,CAeE,SAAS,CAfX,SAAA,CAgBE,iBAAiB,CAhBnB,OAAA,CAkBE,GAAG,CAAEC,GAlBP,CAAA,CAAA,CAoBG,KAAK,CAAL,QAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA,CACC,KAAA,CAAA,aAAA,CAAA,CAAA,CAAA,IAAA,CACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,CAA6B,SAAA,KAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,UAAA,CAAA,MAC5B,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CACE,GAAG,CAAA,CAAA,UAAA,CAAEC,KAAF,GAAA,IAAEA,EAAAA,KAAF,GAAA,IAAA,EAAEA,CAAF,IAAA,EAAEA,CAAAA,KAAK,CAAP,GAAA,IAAA,IAAA,EAAA,UAAA,GAAA,IAAA,EAAA,CAAA,UAAA,CADL,CAAA,CAEE,OAAO,CAAEA,KAFX,CAAA,CAGMA,KAHN,GAAA,IAGMA,EAAAA,KAHN,GAAA,IAAA,EAGMA,CAHN,IAAA,EAGMA,CAAAA,KAAK,CAJiB,KAC5B,CAAA,CAD4B,CAFjC,CAEI,CADH,CADD,CArBL,uBACE,CADF,CAdF,CAAA,CAmDA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,OAAgD,IAA/C,CAAA,OAA+C,OAA/C,OAA+C,CAA/C,IAA+C,OAA/C,IAA+C,CAAtBC,UAAsB,OAA9BP,MAA8B,CAChE,GAAMQ,CAAAA,eAAe,CAAGT,QAAQ,CAAA,QAAA,CAAWQ,UAAU,EAArD,EAAgC,CAAhC,CACA,GAAME,CAAAA,SAAS,CAAGV,QAAQ,CAAA,QAAA,CAAWW,IAAI,EAAzC,EAA0B,CAA1B,CAEA,GAAI,CAAJ,OAAA,CAAc,CACZ,MAAA,KAAA,CACD,CAED,MAAO,CAAA,KAAK,CAAL,YAAA,CAAA,OAAA,CAA4B,CACjCA,IAAI,CAAED,SAAS,CAAA,SAAA,CADkB,cAAA,CAEjCT,MAAM,CAAEQ,eAFyB,CAA5B,CAAP,CARF,CAAA,CAaA,cAAeG,CAAAA,IAAI,CAACC,UAAU,CAA9B,OAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]},"metadata":{},"sourceType":"module"}