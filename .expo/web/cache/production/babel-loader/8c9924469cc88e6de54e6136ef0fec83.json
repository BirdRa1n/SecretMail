{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"startColor\",\"endColor\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import{usePropsResolution}from\"../../../hooks\";import{canUseDom}from\"../../../utils\";import Box from\"../../primitives/Box\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useToken}from\"../../../hooks/useToken\";var Skeleton=function Skeleton(props,ref){var isDomUsable=canUseDom();var _usePropsResolution=usePropsResolution('Skeleton',props),children=_usePropsResolution.children,startColor=_usePropsResolution.startColor,endColor=_usePropsResolution.endColor,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var blinkAnim=React.useRef(new Animated.Value(0)).current;var tokenisedStartColor=useToken('colors',startColor);React.useEffect(function(){if(isDomUsable){var blink=Animated.sequence([Animated.timing(blinkAnim,{toValue:1,duration:resolvedProps.fadeDuration*10000*(1/resolvedProps.speed),useNativeDriver:Platform.OS!=='web'}),Animated.timing(blinkAnim,{toValue:0,duration:resolvedProps.fadeDuration*10000*(1/resolvedProps.speed),useNativeDriver:Platform.OS!=='web'})]);Animated.loop(blink).start();}},[blinkAnim,isDomUsable,resolvedProps]);var skeletonStyle={skeleton:{height:'100%',width:'100%',backgroundColor:tokenisedStartColor,opacity:blinkAnim}};if(useHasResponsiveProps(props)){return null;}return resolvedProps.isLoaded?children:React.createElement(Box,_extends({bg:endColor},resolvedProps,{ref:ref}),React.createElement(Animated.View,{style:skeletonStyle.skeleton}));};export default memo(forwardRef(Skeleton));","map":{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","isDomUsable","canUseDom","resolvedProps","usePropsResolution","blinkAnim","React","Animated","tokenisedStartColor","useToken","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","height","width","backgroundColor","opacity","useHasResponsiveProps","endColor","ref","memo","forwardRef"],"mappings":"+ZAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,C,0HAEA,OAAA,kBAAA,sBACA,OAAA,SAAA,sBACA,MAAA,CAAA,GAAA,4BAEA,OAAA,qBAAA,4CACA,OAAA,QAAA,+BAEA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAA,KAAA,CAAA,GAAA,CAAqC,CACpD,GAAMC,CAAAA,WAAW,CAAGC,SAApB,EAAA,CACA,wBAKIE,kBAAkB,CAAA,UAAA,CAP8B,KAO9B,CALtB,CAAM,QAAN,qBAAM,QAAN,CAAM,UAAN,qBAAM,UAAN,CAAM,QAAN,qBAAM,QAAN,CAIKD,aAJL,yDAOA,GAAME,CAAAA,SAAS,CAAGC,KAAK,CAALA,MAAAA,CAAa,GAAIC,CAAAA,QAAQ,CAAZ,KAAA,CAAbD,CAAa,CAAbA,EAAlB,OAAA,CACA,GAAME,CAAAA,mBAAmB,CAAGC,QAAQ,CAAA,QAAA,CAVgB,UAUhB,CAApC,CAGAH,KAAK,CAALA,SAAAA,CAAgB,UAAM,CAEpB,GAAA,WAAA,CAAiB,CACf,GAAMI,CAAAA,KAAK,CAAG,QAAQ,CAAR,QAAA,CAAkB,CAC9B,QAAQ,CAAR,MAAA,CAAA,SAAA,CAA2B,CACzBC,OAAO,CADkB,CAAA,CAEzBC,QAAQ,CACNT,aAAa,CAAbA,YAAAA,CAAAA,KAAAA,EAAsC,EAAIA,aAAa,CAHhC,KAGvBA,CAHuB,CAIzBU,eAAe,CAAEC,QAAQ,CAARA,EAAAA,GAAgB,KAJR,CAA3B,CAD8B,CAO9B,QAAQ,CAAR,MAAA,CAAA,SAAA,CAA2B,CACzBH,OAAO,CADkB,CAAA,CAEzBC,QAAQ,CACNT,aAAa,CAAbA,YAAAA,CAAAA,KAAAA,EAAsC,EAAIA,aAAa,CAHhC,KAGvBA,CAHuB,CAIzBU,eAAe,CAAEC,QAAQ,CAARA,EAAAA,GAAgB,KAJR,CAA3B,CAP8B,CAAlB,CAAd,CAcAP,QAAQ,CAARA,IAAAA,CAAAA,KAAAA,EAAAA,KAAAA,GACD,CAlBHD,CAAAA,CAmBG,CAAA,SAAA,CAAA,WAAA,CAnBHA,aAmBG,CAnBHA,EAqBA,GAAMS,CAAAA,aAAkB,CAAG,CACzBC,QAAQ,CAAE,CACRC,MAAM,CADE,MAAA,CAERC,KAAK,CAFG,MAAA,CAGRC,eAAe,CAHP,mBAAA,CAIRC,OAAO,CAJC,SAAA,CADe,CAA3B,CAUA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CAED,MAAOlB,CAAAA,aAAa,CAAbA,QAAAA,CAAAA,QAAAA,CAGL,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAK,EAAE,CAAEmB,QAAT,CAAA,CAAA,aAAA,CAAA,CAAsC,GAAG,CAAEC,GAA3C,CAAA,CAAA,CACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,CAAA,CAAe,KAAK,CAAER,aAAa,CAACC,QAApC,CAAA,CADF,CAHF,CAhDF,CAAA,CAyDA,cAAeQ,CAAAA,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box bg={endColor} {...resolvedProps} ref={ref}>\n      <Animated.View style={skeletonStyle.skeleton} />\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"module"}