{"ast":null,"code":"import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import isNil from'lodash.isnil';export function useMediaQuery(query){var dims=useWindowDimensions();var height=dims===null||dims===void 0?void 0:dims.height;var width=dims===null||dims===void 0?void 0:dims.width;return iterateQuery(query,height,width);}function queryResolver(query,width,height){for(var queryKey in query){if(!calculateQuery(queryKey,query[queryKey],height,width)){return false;}}return true;}function iterateQuery(query,height,width){var queryResults=[];if(Array.isArray(query)){query.forEach(function(subQuery){queryResults.push(queryResolver(subQuery,width,height));});}else{queryResults.push(queryResolver(query,width,height));}return queryResults;}function calculateQuery(key,val,height,width){var retval;if(isNil(width)||isNil(height)||isNil(val)){return;}switch(key){case'maxWidth':retval=!isNil(val)?width<=val:undefined;break;case'minWidth':retval=!isNil(val)?width>=val:undefined;break;case'maxHeight':retval=!isNil(val)?height<=val:undefined;break;case'minHeight':retval=!isNil(val)?height>=val:undefined;break;case'orientation':if(!isNil(val)){if(width>height){retval=val==='landscape';}else{retval=val==='portrait';}}break;default:break;}return retval;}","map":{"version":3,"sources":["useMediaQuery.ts"],"names":["dims","useWindowDimensions","height","width","iterateQuery","calculateQuery","query","queryResults","Array","subQuery","queryResolver","isNil","retval","val"],"mappings":"mFACA,MAAA,CAAA,KAAA,KAAA,cAAA,CAcA,MAAO,SAAA,CAAA,aAAA,CAAA,KAAA,CAAgD,CACrD,GAAMA,CAAAA,IAAI,CAAGC,mBAAb,EAAA,CACA,GAAMC,CAAAA,MAAM,CAAGF,IAAH,GAAA,IAAGA,EAAAA,IAAH,GAAA,IAAA,EAAGA,CAAH,IAAA,EAAGA,CAAAA,IAAI,CAAnB,MAAA,CACA,GAAMG,CAAAA,KAAK,CAAGH,IAAH,GAAA,IAAGA,EAAAA,IAAH,GAAA,IAAA,EAAGA,CAAH,IAAA,EAAGA,CAAAA,IAAI,CAAlB,KAAA,CAEA,MAAOI,CAAAA,YAAY,CAAA,KAAA,CAAA,MAAA,CAAnB,KAAmB,CAAnB,CACD,CAED,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAoE,CAClE,IAAK,GAAL,CAAA,QAAA,GAAA,CAAA,KAAA,CAA8B,CAC5B,GAAI,CAACC,cAAc,CAAA,QAAA,CAAWC,KAAK,CAAhB,QAAgB,CAAhB,CAAA,MAAA,CAAnB,KAAmB,CAAnB,CAA+D,CAC7D,MAAA,MAAA,CACD,CACF,CACD,MAAA,KAAA,CACD,CAED,QAAA,CAAA,YAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAIE,CACA,GAAMC,CAAAA,YAAY,CAAlB,EAAA,CACA,GAAIC,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,CAA0B,CACxBF,KAAK,CAALA,OAAAA,CAAeG,SAAAA,QAAD,CAAwB,CACpCF,YAAY,CAAZA,IAAAA,CAAkBG,aAAa,CAAA,QAAA,CAAA,KAAA,CAA/BH,MAA+B,CAA/BA,EADFD,CAAAA,EADF,CAAA,IAIO,CACLC,YAAY,CAAZA,IAAAA,CAAkBG,aAAa,CAAA,KAAA,CAAA,KAAA,CAA/BH,MAA+B,CAA/BA,EACD,CACD,MAAA,CAAA,YAAA,CACD,CAED,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAA,KAAA,CAKE,CACA,GAAA,CAAA,MAAA,CACA,GAAII,KAAK,CAALA,KAAK,CAALA,EAAgBA,KAAK,CAArBA,MAAqB,CAArBA,EAAiCA,KAAK,CAA1C,GAA0C,CAA1C,CAAiD,CAC/C,OACD,CACD,OAAA,GAAA,EACE,IAAA,UAAA,CACEC,MAAM,CAAG,CAACD,KAAK,CAAN,GAAM,CAAN,CAAcR,KAAK,EAAnB,GAAA,CAATS,SAAAA,CACA,MACF,IAAA,UAAA,CACEA,MAAM,CAAG,CAACD,KAAK,CAAN,GAAM,CAAN,CAAcR,KAAK,EAAnB,GAAA,CAATS,SAAAA,CACA,MACF,IAAA,WAAA,CACEA,MAAM,CAAG,CAACD,KAAK,CAAN,GAAM,CAAN,CAAcT,MAAM,EAApB,GAAA,CAATU,SAAAA,CACA,MACF,IAAA,WAAA,CACEA,MAAM,CAAG,CAACD,KAAK,CAAN,GAAM,CAAN,CAAcT,MAAM,EAApB,GAAA,CAATU,SAAAA,CACA,MACF,IAAA,aAAA,CACE,GAAI,CAACD,KAAK,CAAV,GAAU,CAAV,CAAiB,CACf,GAAIR,KAAK,CAAT,MAAA,CAAoB,CAClBS,MAAM,CAAGC,GAAG,GAAZD,WAAAA,CADF,CAAA,IAEO,CACLA,MAAM,CAAGC,GAAG,GAAZD,UAAAA,CACD,CACF,CACD,MACF,QACE,MAvBJ,CAyBA,MAAA,CAAA,MAAA,CACD","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport isNil from 'lodash.isnil';\n\ntype QueryKeys =\n  | 'maxWidth'\n  | 'minWidth'\n  | 'maxHeight'\n  | 'minHeight'\n  | 'orientation';\n\ntype SubQuery = {\n  [queryKey in QueryKeys]?: number | string;\n};\ntype Query = Array<SubQuery>;\n\nexport function useMediaQuery(query: SubQuery | Query) {\n  const dims = useWindowDimensions();\n  const height = dims?.height;\n  const width = dims?.width;\n\n  return iterateQuery(query, height, width);\n}\n\nfunction queryResolver(query: any, width?: number, height?: number) {\n  for (const queryKey in query) {\n    if (!calculateQuery(queryKey, query[queryKey], height, width)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction iterateQuery(\n  query: SubQuery | Query,\n  height?: number,\n  width?: number\n) {\n  const queryResults = [];\n  if (Array.isArray(query)) {\n    query.forEach((subQuery: SubQuery) => {\n      queryResults.push(queryResolver(subQuery, width, height));\n    });\n  } else {\n    queryResults.push(queryResolver(query, width, height));\n  }\n  return queryResults;\n}\n\nfunction calculateQuery(\n  key: string,\n  val?: number | string,\n  height?: number,\n  width?: number\n) {\n  let retval;\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return retval;\n}\n"]},"metadata":{},"sourceType":"module"}