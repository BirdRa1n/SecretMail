{"ast":null,"code":"import{useTheme}from\"./useTheme\";export function useResolvedFontFamily(props){var fontFamily=props.fontFamily,fontStyle=props.fontStyle,fontWeight=props.fontWeight;var newFontFamily=fontFamily;var newFontStyle=fontStyle;var newFontWeight=fontWeight;var _useTheme=useTheme(),fontConfig=_useTheme.fontConfig,fontWeights=_useTheme.fontWeights,fonts=_useTheme.fonts;if(fontWeight&&fontStyle&&fontFamily&&fontFamily in fonts){var fontToken=fonts[fontFamily];if(fontConfig&&fontConfig[fontToken]){newFontWeight=undefined;newFontStyle=undefined;var fontWeightNumber=fontWeight in fontWeights?fontWeights[fontWeight]:fontWeight;var fontVariant=fontConfig[fontToken][fontWeightNumber];if(typeof fontVariant==='object'){if(fontVariant[fontStyle])newFontFamily=fontVariant[fontStyle];}else{newFontFamily=fontVariant;}}else{newFontFamily=fonts[fontFamily];}}return{fontFamily:newFontFamily,fontWeight:newFontWeight,fontStyle:newFontStyle};}","map":{"version":3,"sources":["useResolvedFontFamily.ts"],"names":["fontWeight","newFontFamily","newFontStyle","newFontWeight","fonts","useTheme","fontFamily","fontToken","fontConfig","fontWeightNumber","fontWeights","fontVariant","fontStyle"],"mappings":"AAAA,OAAA,QAAA,kBAWA,MAAO,SAAA,CAAA,qBAAA,CAAA,KAAA,CAIJ,CACD,GAAM,CAAA,UAAN,CAAA,KAAA,CAAM,UAAN,CAAM,SAAN,CAAA,KAAA,CAAM,SAAN,CAA+BA,UAA/B,CAAA,KAAA,CAA+BA,UAA/B,CACA,GAAIC,CAAAA,aAAa,CAAjB,UAAA,CACA,GAAIC,CAAAA,YAAY,CAAhB,SAAA,CACA,GAAIC,CAAAA,aAAa,CAAjB,UAAA,CAEA,cAA2CE,QAA3C,EAAA,CAAM,UAAN,WAAM,UAAN,CAAM,WAAN,WAAM,WAAN,CAAiCD,KAAjC,WAAiCA,KAAjC,CACA,GAAIJ,UAAU,EAAVA,SAAAA,EAAAA,UAAAA,EAAyCM,UAAU,GAAvD,CAAA,KAAA,CAAkE,CAEhE,GAAMC,CAAAA,SAAc,CAAGH,KAAK,CAA5B,UAA4B,CAA5B,CACA,GAAII,UAAU,EAAIA,UAAU,CAA5B,SAA4B,CAA5B,CAAyC,CAKvCL,aAAa,CAL0B,SAKvCA,CAEAD,YAAY,CAAZA,SAAAA,CAEA,GAAIO,CAAAA,gBAAgB,CAClBT,UAAU,GAAVA,CAAAA,WAAAA,CAA4BU,WAAW,CAAvCV,UAAuC,CAAvCA,CADF,UAAA,CAEA,GAAIW,CAAAA,WAAW,CAAGH,UAAU,CAAVA,SAAU,CAAVA,CAAlB,gBAAkBA,CAAlB,CAEA,GAAI,MAAA,CAAA,WAAA,GAAJ,QAAA,CAAqC,CACnC,GAAIG,WAAW,CAAf,SAAe,CAAf,CAA4BV,aAAa,CAAGU,WAAW,CAA3BV,SAA2B,CAA3BA,CAD9B,CAAA,IAEO,CACLA,aAAa,CAAbA,WAAAA,CACD,CAjBH,CAAA,IAkBO,CACLA,aAAa,CAAGG,KAAK,CAArBH,UAAqB,CAArBA,CACD,CACF,CAED,MAAO,CACLK,UAAU,CADL,aAAA,CAELN,UAAU,CAFL,aAAA,CAGLY,SAAS,CAAEV,YAHN,CAAP,CAKD","sourcesContent":["import { useTheme } from './useTheme';\nimport type { ITheme } from '../theme';\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: keyof ITheme['fonts'];\n  fontStyle?: string;\n  fontWeight?: keyof ITheme['fontWeights'];\n}) {\n  const { fontFamily, fontStyle, fontWeight } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken: any = fonts[fontFamily];\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}