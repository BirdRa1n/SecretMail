{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"icon\",\"children\",\"isHovered\",\"isPressed\",\"isFocused\",\"isFocusVisible\",\"isDisabled\"],_excluded2=[\"_icon\",\"onPressIn\",\"onPressOut\",\"onHoverIn\",\"onHoverOut\",\"onFocus\",\"onBlur\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Pressable}from\"../../primitives/Pressable\";import{Icon}from\"../../primitives/Icon\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{composeEventHandlers}from\"../../../utils\";import{useHover,useFocus,useIsPressed}from\"../../primitives/Pressable/Pressable\";import{useFocusRing}from'@react-native-aria/focus';var IconButton=function IconButton(_ref,ref){var icon=_ref.icon,children=_ref.children,isHoveredProp=_ref.isHovered,isPressedProp=_ref.isPressed,isFocusedProp=_ref.isFocused,isFocusVisibleProp=_ref.isFocusVisible,isDisabled=_ref.isDisabled,props=_objectWithoutProperties(_ref,_excluded);var _useHover=useHover(),hoverProps=_useHover.hoverProps,isHovered=_useHover.isHovered;var _useIsPressed=useIsPressed(),pressableProps=_useIsPressed.pressableProps,isPressed=_useIsPressed.isPressed;var _useFocus=useFocus(),focusProps=_useFocus.focusProps,isFocused=_useFocus.isFocused;var _useFocusRing=useFocusRing(),isFocusVisible=_useFocusRing.isFocusVisible,focusRingProps=_useFocusRing.focusProps;var _usePropsResolution=usePropsResolution('IconButton',props,{isHovered:isHoveredProp||isHovered,isPressed:isPressedProp||isPressed,isFocused:isFocusedProp||isFocused,isFocusVisible:isFocusVisibleProp||isFocusVisible,isDisabled:isDisabled}),_icon=_usePropsResolution._icon,onPressIn=_usePropsResolution.onPressIn,onPressOut=_usePropsResolution.onPressOut,onHoverIn=_usePropsResolution.onHoverIn,onHoverOut=_usePropsResolution.onHoverOut,onFocus=_usePropsResolution.onFocus,onBlur=_usePropsResolution.onBlur,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var clonedIcon;if(icon){clonedIcon=React.cloneElement(icon,_objectSpread(_objectSpread({},_icon),icon===null||icon===void 0?void 0:icon.props));}if(useHasResponsiveProps(props)){return null;}return React.createElement(Pressable,_extends({accessibilityRole:\"button\",ref:ref,onPressIn:composeEventHandlers(onPressIn,pressableProps.onPressIn),onPressOut:composeEventHandlers(onPressOut,pressableProps.onPressOut),onHoverIn:composeEventHandlers(onHoverIn,hoverProps.onHoverIn),onHoverOut:composeEventHandlers(onHoverOut,hoverProps.onHoverOut),onFocus:composeEventHandlers(composeEventHandlers(onFocus,focusProps.onFocus),focusRingProps.onFocus),onBlur:composeEventHandlers(composeEventHandlers(onBlur,focusProps.onBlur),focusRingProps.onBlur)},resolvedProps),clonedIcon||React.createElement(Icon,_icon,children));};export default memo(forwardRef(IconButton));","map":{"version":3,"sources":["index.tsx"],"names":["IconButton","isHovered","isPressed","isFocused","isFocusVisible","props","useHover","useIsPressed","useFocus","focusProps","focusRingProps","useFocusRing","resolvedProps","usePropsResolution","isHoveredProp","isPressedProp","isFocusedProp","isFocusVisibleProp","isDisabled","clonedIcon","icon","useHasResponsiveProps","composeEventHandlers","pressableProps","hoverProps","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (\n  {\n    icon,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n      ...icon?.props,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]},"metadata":{},"sourceType":"module"}