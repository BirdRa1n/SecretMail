{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"wrapperRef\",\"isDisabled\",\"isInvalid\",\"isReadOnly\",\"isFocused\",\"isHovered\"],_excluded2=[\"totalLines\",\"onFocus\",\"onBlur\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Input}from\"../Input\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useHover}from'@react-native-aria/interactions';import{mergeRefs}from\"../../../utils\";var TextArea=function TextArea(_ref2,ref){var wrapperRef=_ref2.wrapperRef,isDisabled=_ref2.isDisabled,isInvalid=_ref2.isInvalid,isReadOnly=_ref2.isReadOnly,isFocusedProp=_ref2.isFocused,isHoveredProp=_ref2.isHovered,props=_objectWithoutProperties(_ref2,_excluded);var _ref=React.useRef(null);var _useHover=useHover({},_ref),isHovered=_useHover.isHovered;var _React$useState=React.useState(isFocusedProp),_React$useState2=_slicedToArray(_React$useState,2),isFocused=_React$useState2[0],setIsFocused=_React$useState2[1];var handleFocus=function handleFocus(focusState,callback){setIsFocused(focusState);callback();};var _usePropsResolution=usePropsResolution('TextArea',props,{isHovered:isHoveredProp||isHovered,isDisabled:isDisabled,isFocused:isFocused,isInvalid:isInvalid,isReadOnly:isReadOnly},{extendTheme:['Input']}),totalLines=_usePropsResolution.totalLines,_onFocus=_usePropsResolution.onFocus,_onBlur=_usePropsResolution.onBlur,newProps=_objectWithoutProperties(_usePropsResolution,_excluded2);if(useHasResponsiveProps(props)){return null;}return React.createElement(Input,_extends({},newProps,{INTERNAL_notResolveThemeAndPseudoProps:true,numberOfLines:totalLines,wrapperRef:wrapperRef,ref:mergeRefs([_ref,ref]),onFocus:function onFocus(e){handleFocus(true,_onFocus?function(){return _onFocus(e);}:function(){});},onBlur:function onBlur(e){handleFocus(false,_onBlur?function(){return _onBlur(e);}:function(){});},isDisabled:isDisabled,isInvalid:isInvalid,isReadOnly:isReadOnly}));};export default memo(forwardRef(TextArea));","map":{"version":3,"sources":["index.tsx"],"names":["TextArea","isFocused","isHovered","props","_ref","React","useHover","handleFocus","setIsFocused","callback","newProps","usePropsResolution","isHoveredProp","isDisabled","isInvalid","isReadOnly","extendTheme","useHasResponsiveProps","mergeRefs","e","onFocus","onBlur","memo","forwardRef"],"mappings":"qjBAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,KAAA,gBAEA,OAAA,kBAAA,oCACA,OAAA,qBAAA,4CACA,OAAA,QAAA,KAAA,iCAAA,CACA,OAAA,SAAA,sBAcA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,OAAA,GAAA,CAWZ,IAVH,CAAA,UAUG,OAVH,UAUG,CAVH,UAUG,OAVH,UAUG,CAVH,SAUG,OAVH,SAUG,CAVH,UAUG,OAVH,UAUG,CAVH,aAUG,OALDC,SAKC,CAVH,aAUG,OAJDC,SAIC,CAHEC,KAGF,2CACH,GAAMC,CAAAA,IAAI,CAAGC,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb,CACA,cAAsBC,QAAQ,CAAA,EAAA,CAA9B,IAA8B,CAA9B,CAAQJ,SAAR,WAAQA,SAAR,CACA,oBAAkCG,KAAK,CAALA,QAAAA,CAAlC,aAAkCA,CAAlC,oDAAM,SAAN,qBAAM,YAAN,qBACA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAA,UAAA,CAAA,QAAA,CAAwC,CAC1DC,YAAY,CAAZA,UAAY,CAAZA,CACAC,QAAQ,GAFV,CAAA,CAIA,wBAAqDE,kBAAkB,CAAA,UAAA,CAAA,KAAA,CAGrE,CACET,SAAS,CAAEU,aAAa,EAD1B,SAAA,CAEEC,UAFF,CAEEA,UAFF,CAGEZ,SAHF,CAGEA,SAHF,CAIEa,SAJF,CAIEA,SAJF,CAKEC,UAAAA,CAAAA,UALF,CAHqE,CAUrE,CAAEC,WAAW,CAAE,CAAA,OAAA,CAAf,CAVqE,CAAvE,CAAM,UAAN,qBAAM,UAAN,CAAM,QAAN,qBAAM,OAAN,CAAM,OAAN,qBAAM,MAAN,CAAwCN,QAAxC,0DAaA,GAAIO,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAEE,sCAAsC,CAFxC,IAAA,CAGE,aAAa,CAHf,UAAA,CAIE,UAAU,CAJZ,UAAA,CAKE,GAAG,CAAEC,SAAS,CAAC,CAAA,IAAA,CALjB,GAKiB,CAAD,CALhB,CAME,OAAO,CAAGC,iBAAAA,CAAD,CAAO,CACdZ,WAAW,CAAA,IAAA,CAAOa,QAAO,CAAG,iBAAMA,CAAAA,QAAO,CAAhB,CAAgB,CAAb,EAAH,CAAsB,UAAM,CAArDb,CAAW,CAAXA,CAPJ,CAAA,CASE,MAAM,CAAGY,gBAAAA,CAAD,CAAO,CACbZ,WAAW,CAAA,KAAA,CAAQc,OAAM,CAAG,iBAAMA,CAAAA,OAAM,CAAf,CAAe,CAAZ,EAAH,CAAqB,UAAM,CAApDd,CAAW,CAAXA,CAVJ,CAAA,CAYE,UAAU,CAZZ,UAAA,CAaE,SAAS,CAbX,SAAA,CAcE,UAAU,CAAEQ,UAdd,CAAA,CAAA,CADF,CAnCF,CAAA,CAuDA,cAAeO,CAAAA,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport type { InterfaceInputProps } from '../Input/types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport type { PlatformProps } from '../../../components/types';\nexport interface ITextAreaProps\n  extends Omit<\n      InterfaceInputProps,\n      '_web' | '_android' | '_ios' | '_light' | '_dark' | '_important'\n    >,\n    PlatformProps<ITextAreaProps> {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = (\n  {\n    wrapperRef,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    ...props\n  }: ITextAreaProps,\n  ref: any\n) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(isFocusedProp);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  const { totalLines, onFocus, onBlur, ...newProps } = usePropsResolution(\n    'TextArea',\n    props,\n    {\n      isHovered: isHoveredProp || isHovered,\n      isDisabled,\n      isFocused,\n      isInvalid,\n      isReadOnly,\n    },\n    { extendTheme: ['Input'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      INTERNAL_notResolveThemeAndPseudoProps\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={mergeRefs([_ref, ref])}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      isDisabled={isDisabled}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]},"metadata":{},"sourceType":"module"}