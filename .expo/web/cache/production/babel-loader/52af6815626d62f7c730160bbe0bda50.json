{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{snapValueToStep as $aTwux$snapValueToStep,clamp as $aTwux$clamp}from\"@react-aria/utils\";import{useControlledState as $aTwux$useControlledState}from\"@react-stately/utils\";import{useMemo as $aTwux$useMemo,useState as $aTwux$useState,useRef as $aTwux$useRef}from\"react\";function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:true,configurable:true});}var $28f99e3e86e6ec45$exports={};$parcel$export($28f99e3e86e6ec45$exports,\"useSliderState\",function(){return $28f99e3e86e6ec45$export$e5fda3247f5d67f9;});var $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE=0;var $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE=100;var $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE=1;function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props){var isDisabled=props.isDisabled,_props$minValue=props.minValue,minValue=_props$minValue===void 0?$28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE:_props$minValue,_props$maxValue=props.maxValue,maxValue=_props$maxValue===void 0?$28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE:_props$maxValue,formatter=props.numberFormatter,_props$step=props.step,step=_props$step===void 0?$28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE:_props$step;var pageSize=$aTwux$useMemo(function(){var calcPageSize=(maxValue-minValue)/10;calcPageSize=$aTwux$snapValueToStep(calcPageSize,0,calcPageSize+step,step);return Math.max(calcPageSize,step);},[step,maxValue,minValue]);var _defaultValue;var _$aTwux$useControlled=$aTwux$useControlledState(props.value,(_defaultValue=props.defaultValue)!==null&&_defaultValue!==void 0?_defaultValue:[minValue],props.onChange),_$aTwux$useControlled2=_slicedToArray(_$aTwux$useControlled,2),values=_$aTwux$useControlled2[0],setValues=_$aTwux$useControlled2[1];var _$aTwux$useState=$aTwux$useState(new Array(values.length).fill(false)),_$aTwux$useState2=_slicedToArray(_$aTwux$useState,2),isDraggings=_$aTwux$useState2[0],setDraggings=_$aTwux$useState2[1];var isEditablesRef=$aTwux$useRef(new Array(values.length).fill(true));var _$aTwux$useState3=$aTwux$useState(undefined),_$aTwux$useState4=_slicedToArray(_$aTwux$useState3,2),focusedIndex=_$aTwux$useState4[0],setFocusedIndex=_$aTwux$useState4[1];var valuesRef=$aTwux$useRef(null);valuesRef.current=values;var isDraggingsRef=$aTwux$useRef(null);isDraggingsRef.current=isDraggings;function getValuePercent(value){return(value-minValue)/(maxValue-minValue);}function getThumbMinValue(index){return index===0?minValue:values[index-1];}function getThumbMaxValue(index){return index===values.length-1?maxValue:values[index+1];}function isThumbEditable(index){return isEditablesRef.current[index];}function setThumbEditable(index,editable){isEditablesRef.current[index]=editable;}function updateValue(index,value){if(isDisabled||!isThumbEditable(index))return;var thisMin=getThumbMinValue(index);var thisMax=getThumbMaxValue(index);value=$aTwux$snapValueToStep(value,thisMin,thisMax,step);valuesRef.current=$28f99e3e86e6ec45$var$replaceIndex(valuesRef.current,index,value);setValues(valuesRef.current);}function updateDragging(index,dragging){if(isDisabled||!isThumbEditable(index))return;var wasDragging=isDraggingsRef.current[index];isDraggingsRef.current=$28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current,index,dragging);setDraggings(isDraggingsRef.current);if(props.onChangeEnd&&wasDragging&&!isDraggingsRef.current.some(Boolean))props.onChangeEnd(valuesRef.current);}function getFormattedValue(value){return formatter.format(value);}function setThumbPercent(index,percent){updateValue(index,getPercentValue(percent));}function getRoundedValue(value){return Math.round((value-minValue)/step)*step+minValue;}function getPercentValue(percent){var val=percent*(maxValue-minValue)+minValue;return $aTwux$clamp(getRoundedValue(val),minValue,maxValue);}function incrementThumb(index){var stepSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var s=Math.max(stepSize,step);updateValue(index,$aTwux$snapValueToStep(values[index]+s,minValue,maxValue,step));}function decrementThumb(index){var stepSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var s=Math.max(stepSize,step);updateValue(index,$aTwux$snapValueToStep(values[index]-s,minValue,maxValue,step));}return{values:values,getThumbValue:function getThumbValue(index){return values[index];},setThumbValue:updateValue,setThumbPercent:setThumbPercent,isThumbDragging:function isThumbDragging(index){return isDraggings[index];},setThumbDragging:updateDragging,focusedThumb:focusedIndex,setFocusedThumb:setFocusedIndex,getThumbPercent:function getThumbPercent(index){return getValuePercent(values[index]);},getValuePercent:getValuePercent,getThumbValueLabel:function getThumbValueLabel(index){return getFormattedValue(values[index]);},getFormattedValue:getFormattedValue,getThumbMinValue:getThumbMinValue,getThumbMaxValue:getThumbMaxValue,getPercentValue:getPercentValue,isThumbEditable:isThumbEditable,setThumbEditable:setThumbEditable,incrementThumb:incrementThumb,decrementThumb:decrementThumb,step:step,pageSize:pageSize};}function $28f99e3e86e6ec45$var$replaceIndex(array,index,value){if(array[index]===value)return array;return[].concat(_toConsumableArray(array.slice(0,index)),[value],_toConsumableArray(array.slice(index+1)));}export{$28f99e3e86e6ec45$export$e5fda3247f5d67f9 as useSliderState};","map":{"version":3,"sources":["packages/@react-stately/slider/src/useSliderState.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * Increments the value of the thumb by the step or page amount.\n   */\n  incrementThumb(index: number, stepSize?: number): void,\n  /**\n   * Decrements the value of the thumb by the step or page amount.\n   */\n  decrementThumb(index: number, stepSize?: number): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number,\n\n  /**\n   * The page size for the slider, used to do a bigger step.\n   */\n  readonly pageSize: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {\n    isDisabled,\n    minValue = DEFAULT_MIN_VALUE,\n    maxValue = DEFAULT_MAX_VALUE,\n    numberFormatter: formatter,\n    step = DEFAULT_STEP_VALUE\n  } = props;\n\n  // Page step should be at least equal to step and always a multiple of the step.\n  let pageSize = useMemo(() => {\n    let calcPageSize = (maxValue - minValue) / 10;\n    calcPageSize = snapValueToStep(calcPageSize, 0, calcPageSize + step, step);\n    return Math.max(calcPageSize, step);\n  }, [step, maxValue, minValue]);\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  function incrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] + s, minValue, maxValue, step));\n  }\n\n  function decrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] - s, minValue, maxValue, step));\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    incrementThumb,\n    decrementThumb,\n    step,\n    pageSize\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"]},"metadata":{},"sourceType":"module"}