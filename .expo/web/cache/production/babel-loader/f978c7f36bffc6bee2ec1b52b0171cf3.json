{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"_icon\",\"onPressIn\",\"onPressOut\",\"onHoverIn\",\"onHoverOut\",\"onFocus\",\"onBlur\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{ModalContext}from\"./Context\";import{usePropsResolution}from\"../../../hooks\";import{Pressable}from\"../../primitives/Pressable\";import{CloseIcon}from\"../../primitives/Icon/Icons\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useHover,useFocus,useIsPressed}from\"../../primitives/Pressable/Pressable\";import{composeEventHandlers}from\"../../../utils\";import{useFocusRing}from'@react-native-aria/focus';var ModalCloseButton=function ModalCloseButton(props,ref){var _useHover=useHover(),hoverProps=_useHover.hoverProps,isHovered=_useHover.isHovered;var _useIsPressed=useIsPressed(),pressableProps=_useIsPressed.pressableProps,isPressed=_useIsPressed.isPressed;var _useFocus=useFocus(),focusProps=_useFocus.focusProps,isFocused=_useFocus.isFocused;var _useFocusRing=useFocusRing(),isFocusVisible=_useFocusRing.isFocusVisible,focusRingProps=_useFocusRing.focusProps;var _usePropsResolution=usePropsResolution('ModalCloseButton',props,{isHovered:isHovered,isPressed:isPressed,isFocused:isFocused,isFocusVisible:isFocusVisible}),_icon=_usePropsResolution._icon,onPressIn=_usePropsResolution.onPressIn,onPressOut=_usePropsResolution.onPressOut,onHoverIn=_usePropsResolution.onHoverIn,onHoverOut=_usePropsResolution.onHoverOut,onFocus=_usePropsResolution.onFocus,onBlur=_usePropsResolution.onBlur,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var _React$useContext=React.useContext(ModalContext),handleClose=_React$useContext.handleClose;if(useHasResponsiveProps(props)){return null;}return React.createElement(Pressable,_extends({accessibilityRole:\"button\",ref:ref,onPressIn:composeEventHandlers(onPressIn,pressableProps.onPressIn),onPressOut:composeEventHandlers(onPressOut,pressableProps.onPressOut),onHoverIn:composeEventHandlers(onHoverIn,hoverProps.onHoverIn),onHoverOut:composeEventHandlers(onHoverOut,hoverProps.onHoverOut),onFocus:composeEventHandlers(composeEventHandlers(onFocus,focusProps.onFocus),focusRingProps.onFocus),onBlur:composeEventHandlers(composeEventHandlers(onBlur,focusProps.onBlur),focusRingProps.onBlur),onPress:handleClose},resolvedProps),React.createElement(CloseIcon,_icon));};export default memo(forwardRef(ModalCloseButton));","map":{"version":3,"sources":["ModalCloseButton.tsx"],"names":["ModalCloseButton","isHovered","useHover","isPressed","useIsPressed","isFocused","useFocus","focusProps","focusRingProps","useFocusRing","resolvedProps","usePropsResolution","isFocusVisible","handleClose","React","useHasResponsiveProps","composeEventHandlers","pressableProps","hoverProps","memo","forwardRef"],"mappings":"ycAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,YAAA,iBACA,OAAA,kBAAA,sBACA,OAAA,SAAA,kCACA,OAAA,SAAA,mCAEA,OAAA,qBAAA,4CACA,OAAA,QAAA,CAAA,QAAA,CAAA,YAAA,4CAKA,OAAA,oBAAA,sBACA,OAAA,YAAA,KAAA,0BAAA,CAEA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAA,KAAA,CAAA,GAAA,CAAoC,CAC3D,cAAkCE,QAAlC,EAAA,CAAM,UAAN,WAAM,UAAN,CAAoBD,SAApB,WAAoBA,SAApB,CACA,kBAAsCG,YAAtC,EAAA,CAAM,cAAN,eAAM,cAAN,CAAwBD,SAAxB,eAAwBA,SAAxB,CACA,cAAkCG,QAAlC,EAAA,CAAM,UAAN,WAAM,UAAN,CAAoBD,SAApB,WAAoBA,SAApB,CACA,kBAA4DI,YAA5D,EAAA,CAAM,cAAN,eAAM,cAAN,CAAoCD,cAApC,eAAwBD,UAAxB,CAEA,wBASII,kBAAkB,CAAA,kBAAA,CAAA,KAAA,CAA4B,CAChDV,SADgD,CAChDA,SADgD,CAEhDE,SAFgD,CAEhDA,SAFgD,CAGhDE,SAHgD,CAGhDA,SAHgD,CAIhDO,cAAAA,CAAAA,cAJgD,CAA5B,CATtB,CAAM,KAAN,qBAAM,KAAN,CAAM,SAAN,qBAAM,SAAN,CAAM,UAAN,qBAAM,UAAN,CAAM,SAAN,qBAAM,SAAN,CAAM,UAAN,qBAAM,UAAN,CAAM,OAAN,qBAAM,OAAN,CAAM,MAAN,qBAAM,MAAN,CAQKF,aARL,yDAeA,sBAAwBI,KAAK,CAALA,UAAAA,CArBmC,YAqBnCA,CAAxB,CAAQD,WAAR,mBAAQA,WAAR,CAEA,GAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CACE,iBAAiB,CADnB,QAAA,CAEE,GAAG,CAFL,GAAA,CAGE,SAAS,CAAEC,oBAAoB,CAAA,SAAA,CAAYC,cAAc,CAH3D,SAGiC,CAHjC,CAIE,UAAU,CAAED,oBAAoB,CAAA,UAAA,CAAaC,cAAc,CAJ7D,UAIkC,CAJlC,CAME,SAAS,CAAED,oBAAoB,CAAA,SAAA,CAAYE,UAAU,CANvD,SAMiC,CANjC,CAQE,UAAU,CAAEF,oBAAoB,CAAA,UAAA,CAAaE,UAAU,CARzD,UAQkC,CARlC,CAUE,OAAO,CAAEF,oBAAoB,CAC3BA,oBAAoB,CAAA,OAAA,CAAUT,UAAU,CADb,OACP,CADO,CAE3BC,cAAc,CAZlB,OAU+B,CAV/B,CAeE,MAAM,CAAEQ,oBAAoB,CAC1BA,oBAAoB,CAAA,MAAA,CAAST,UAAU,CADb,MACN,CADM,CAE1BC,cAAc,CAjBlB,MAe8B,CAf9B,CAmBE,OAAO,CAAEK,WAnBX,CAAA,CAAA,aAAA,CAAA,CAsBE,KAAA,CAAA,aAAA,CAAA,SAAA,CAvBJ,KAuBI,CAtBF,CADF,CA1BF,CAAA,CAsDA,cAAeM,CAAAA,IAAI,CAACC,UAAU,CAA9B,gBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ModalContext } from './Context';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst ModalCloseButton = (props: IButtonProps, ref?: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('ModalCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n  const { handleClose } = React.useContext(ModalContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      onPress={handleClose}\n      {...resolvedProps}\n    >\n      <CloseIcon {..._icon} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(ModalCloseButton));\n"]},"metadata":{},"sourceType":"module"}