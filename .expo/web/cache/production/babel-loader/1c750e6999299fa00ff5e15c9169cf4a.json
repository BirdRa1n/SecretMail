{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import React from'react';import Text from\"../components/primitives/Text\";export var addTextAndPropsToStrings=function addTextAndPropsToStrings(children,props){var childArray=React.Children.map(children,function(child){if(typeof child==='string'||typeof child==='number'){return React.createElement(Text,props,child);}else{if(!child){return null;}return React.cloneElement(child,_objectSpread(_objectSpread({},props),child.props));}});return childArray;};","map":{"version":3,"sources":["addTextAndPropsToStrings.tsx"],"names":["addTextAndPropsToStrings","childArray","child","props"],"mappings":"w0BAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,IAAA,qCAEA,MAAO,IAAMA,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAAA,QAAA,CAAA,KAAA,CAA+B,CACrE,GAAMC,CAAAA,UAAU,CAAG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,CAA8BC,SAAAA,KAAD,CAAW,CACzD,GAAI,MAAA,CAAA,KAAA,GAAA,QAAA,EAA6B,MAAA,CAAA,KAAA,GAAjC,QAAA,CAA4D,CAC1D,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,KAAA,CAAP,KAAO,CAAP,CADF,CAAA,IAEO,CACL,GAAI,CAAJ,KAAA,CAAY,CACV,MAAA,KAAA,CACD,CACD,MAAO,CAAA,KAAK,CAAL,YAAA,CAAA,KAAA,gCAA0B,KAA1B,EAEFA,KAAK,CAACC,KAFJ,EAAP,CAID,CAXH,CAAmB,CAAnB,CAaA,MAAA,CAAA,UAAA,CAdK,CAAA","sourcesContent":["import React from 'react';\nimport Text from '../components/primitives/Text';\n\nexport const addTextAndPropsToStrings = (children: any, props: any) => {\n  const childArray = React.Children.map(children, (child) => {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return <Text {...props}>{child}</Text>;\n    } else {\n      if (!child) {\n        return null;\n      }\n      return React.cloneElement(child, {\n        ...props,\n        ...child.props,\n      });\n    }\n  });\n  return childArray;\n};\n"]},"metadata":{},"sourceType":"module"}