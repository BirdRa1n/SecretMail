{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"];import{memo}from'react';import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useBreakpointValue,useTheme,useToken}from\"../../../hooks\";import{useColorMode}from\"../../../core/color-mode/hooks\";import Platform from\"react-native-web/dist/exports/Platform\";export function Hidden(_ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var _usePropsResolution=usePropsResolution('Hidden',props,{},{ignoreProps:['only','platform']}),from=_usePropsResolution.from,till=_usePropsResolution.till,only=_usePropsResolution.only,platform=_usePropsResolution.platform,colorMode=_usePropsResolution.colorMode;var _useTheme=useTheme(),breakpoints=_useTheme.breakpoints;var currentColorMode=useColorMode();var breakpointValueObject=Object.keys(breakpoints).reduce(function(obj,val){obj[val]=val;return obj;},{});var breakpointValue=useBreakpointValue(breakpointValueObject);var _useToken=useToken('breakpoints',[breakpointValue]),_useToken2=_slicedToArray(_useToken,1),currentBreakpointValue=_useToken2[0];var _useToken3=useToken('breakpoints',[from]),_useToken4=_slicedToArray(_useToken3,1),fromBreakPointValue=_useToken4[0];var _useToken5=useToken('breakpoints',[till]),_useToken6=_slicedToArray(_useToken5,1),tillBreakPointValue=_useToken6[0];if(!from&&!till&&!only&&!colorMode&&!platform){return null;}else if(from&&till&&currentBreakpointValue>=fromBreakPointValue&&currentBreakpointValue<tillBreakPointValue){return null;}else if(from&&!till&&currentBreakpointValue>=fromBreakPointValue){return null;}else if(till&&!from&&currentBreakpointValue<tillBreakPointValue){return null;}else if(Array.isArray(only)&&only.includes(breakpointValue)||only===breakpointValue){return null;}else if(Array.isArray(platform)&&platform.includes(Platform.OS)||platform===Platform.OS){return null;}else if(colorMode===currentColorMode.colorMode){return null;}return children;}export default memo(Hidden);","map":{"version":3,"sources":["index.tsx"],"names":["props","colorMode","usePropsResolution","ignoreProps","breakpoints","useTheme","currentColorMode","useColorMode","breakpointValueObject","obj","breakpointValue","useBreakpointValue","useToken","from","currentBreakpointValue","till","Array","only","platform","Platform","memo"],"mappings":"iLAAA,OAAA,IAAA,KAAA,OAAA,CAEA,OAAA,kBAAA,oCACA,OAAA,kBAAA,CAAA,QAAA,CAAA,QAAA,sBACA,OAAA,YAAA,sC,6DAGA,MAAO,SAAA,CAAA,MAAA,MAAsD,IAAtC,CAAA,QAAsC,MAAtC,QAAsC,CAAvBA,KAAuB,0CAC3D,wBAAkDE,kBAAkB,CAAA,QAAA,CAAA,KAAA,CAAA,EAAA,CAIlE,CACEC,WAAW,CAAE,CAAA,MAAA,CAAA,UAAA,CADf,CAJkE,CAApE,CAAM,IAAN,qBAAM,IAAN,CAAM,IAAN,qBAAM,IAAN,CAAM,IAAN,qBAAM,IAAN,CAAM,QAAN,qBAAM,QAAN,CAAoCF,SAApC,qBAAoCA,SAApC,CAQA,cAAwBI,QAAxB,EAAA,CAAQD,WAAR,WAAQA,WAAR,CACA,GAAME,CAAAA,gBAAgB,CAAGC,YAAzB,EAAA,CAEA,GAAMC,CAAAA,qBAAqB,CAAG,MAAM,CAAN,IAAA,CAAA,WAAA,EAAA,MAAA,CAC5B,SAAA,GAAA,CAAA,GAAA,CAA2B,CACzBC,GAAG,CAAHA,GAAG,CAAHA,CAAAA,GAAAA,CACA,MAAA,CAAA,GAAA,CAH0B,CAAA,CAA9B,EAA8B,CAA9B,CAOA,GAAMC,CAAAA,eAAe,CAAGC,kBAAkB,CAA1C,qBAA0C,CAA1C,CACA,cAAiCC,QAAQ,CAAA,aAAA,CAAgB,CAAzD,eAAyD,CAAhB,CAAzC,wCAAM,sBAAN,eACA,eAA8BA,QAAQ,CAAA,aAAA,CAAgB,CAAtD,IAAsD,CAAhB,CAAtC,yCAAM,mBAAN,eACA,eAA8BA,QAAQ,CAAA,aAAA,CAAgB,CAtBK,IAsBL,CAAhB,CAAtC,yCAAM,mBAAN,eAGA,GAAI,CAAA,IAAA,EAAS,CAAT,IAAA,EAAkB,CAAlB,IAAA,EAA2B,CAA3B,SAAA,EAAyC,CAA7C,QAAA,CAAwD,CACtD,MAAA,KAAA,CADF,CAAA,IAKK,IACHC,IAAI,EAAJA,IAAAA,EAEAC,sBAAsB,EAFtBD,mBAAAA,EAGAC,sBAAsB,CAJnB,mBAAA,CAKH,CACA,MAAA,KAAA,CANG,CAAA,IAUA,IAAID,IAAI,EAAI,CAARA,IAAAA,EAAiBC,sBAAsB,EAA3C,mBAAA,CAAoE,CACvE,MAAA,KAAA,CADG,CAAA,IAKA,IAAIC,IAAI,EAAI,CAARA,IAAAA,EAAiBD,sBAAsB,CAA3C,mBAAA,CAAmE,CACtE,MAAA,KAAA,CADG,CAAA,IAMA,IACFE,KAAK,CAALA,OAAAA,CAAAA,IAAAA,GAAuBC,IAAI,CAAJA,QAAAA,CAAxB,eAAwBA,CAAvBD,EACDC,IAAI,GAFD,eAAA,CAGH,CACA,MAAA,KAAA,CAJG,CAAA,IAQA,IACFD,KAAK,CAALA,OAAAA,CAAAA,QAAAA,GAA2BE,QAAQ,CAARA,QAAAA,CAAkBC,QAAQ,CAAtD,EAA4BD,CAA3BF,EACDE,QAAQ,GAAKC,QAAQ,CAFlB,EAAA,CAGH,CACA,MAAA,KAAA,CAJG,CAAA,IAOA,IAAIlB,SAAS,GAAKK,gBAAgB,CAAlC,SAAA,CAA8C,CACjD,MAAA,KAAA,CACD,CACD,MAAA,CAAA,QAAA,CACD,CAED,cAAec,CAAAA,IAAI,CAAnB,MAAmB,CAAnB","sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]},"metadata":{},"sourceType":"module"}