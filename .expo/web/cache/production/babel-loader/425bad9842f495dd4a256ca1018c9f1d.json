{"ast":null,"code":"import React from'react';import{useEffect}from'react';import BackHandler from\"react-native-web/dist/exports/BackHandler\";var keyboardDismissHandlers=[];export var keyboardDismissHandlerManager={push:function push(handler){keyboardDismissHandlers.push(handler);return function(){keyboardDismissHandlers=keyboardDismissHandlers.filter(function(h){return h!==handler;});};},length:function length(){return keyboardDismissHandlers.length;},pop:function pop(){return keyboardDismissHandlers.pop();}};export var useKeyboardDismissable=function useKeyboardDismissable(_ref){var enabled=_ref.enabled,callback=_ref.callback;React.useEffect(function(){var cleanupFn=function cleanupFn(){};if(enabled){cleanupFn=keyboardDismissHandlerManager.push(callback);}else{cleanupFn();}return function(){cleanupFn();};},[enabled,callback]);useBackHandler({enabled:enabled,callback:callback});};export function useBackHandler(_ref2){var enabled=_ref2.enabled,callback=_ref2.callback;useEffect(function(){var backHandler=function backHandler(){callback();return true;};if(enabled){BackHandler.addEventListener('hardwareBackPress',backHandler);}else{BackHandler.removeEventListener('hardwareBackPress',backHandler);}return function(){return BackHandler.removeEventListener('hardwareBackPress',backHandler);};},[enabled,callback]);}","map":{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","h","length","pop","useKeyboardDismissable","callback","React","cleanupFn","useBackHandler","enabled","useEffect","backHandler","BackHandler"],"mappings":"AAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,SAAA,KAAA,OAAA,C,mEAQA,GAAIA,CAAAA,uBAAyC,CAA7C,EAAA,CACA,MAAO,IAAMC,CAAAA,6BAA6B,CAAG,CAC3CC,IAAI,CAAGC,cAAAA,OAAD,CAAwB,CAC5BH,uBAAuB,CAAvBA,IAAAA,CAAAA,OAAAA,EACA,MAAO,WAAM,CACXA,uBAAuB,CAAGA,uBAAuB,CAAvBA,MAAAA,CACvBI,SAAAA,CAAD,QAAOA,CAAAA,CAAC,GADVJ,OACE,EADwBA,CAA1BA,CADF,CAAA,CAHyC,CAAA,CAS3CK,MAAM,CAAE,wBAAML,CAAAA,uBAAuB,CATM,MASnC,EATmC,CAU3CM,GAAG,CAAE,cAAM,CACT,MAAON,CAAAA,uBAAuB,CAA9B,GAAOA,EAAP,CACD,CAZ0C,CAAtC,CAkBP,MAAO,IAAMO,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,MAAoC,IAAnC,CAAA,OAAmC,MAAnC,OAAmC,CAAxBC,QAAwB,MAAxBA,QAAwB,CACxEC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAIC,CAAAA,SAAS,CAAG,oBAAM,CAAtB,CAAA,CACA,GAAA,OAAA,CAAa,CACXA,SAAS,CAAGT,6BAA6B,CAA7BA,IAAAA,CAAZS,QAAYT,CAAZS,CADF,CAAA,IAEO,CACLA,SAAS,GACV,CACD,MAAO,WAAM,CACXA,SAAS,GADX,CAAA,CAPFD,CAAAA,CAUG,CAAA,OAAA,CAVHA,QAUG,CAVHA,EAYAE,cAAc,CAAC,CAAEC,OAAF,CAAEA,OAAF,CAAWJ,QAAAA,CAAAA,QAAX,CAAD,CAAdG,CAbK,CAAA,CAgBP,MAAO,SAAA,CAAA,cAAA,OAAwD,IAAhC,CAAA,OAAgC,OAAhC,OAAgC,CAArBH,QAAqB,OAArBA,QAAqB,CAC7DK,SAAS,CAAC,UAAM,CACd,GAAIC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBN,QAAQ,GACR,MAAA,KAAA,CAFF,CAAA,CAIA,GAAA,OAAA,CAAa,CACXO,WAAW,CAAXA,gBAAAA,CAAAA,mBAAAA,CAAAA,WAAAA,EADF,CAAA,IAEO,CACLA,WAAW,CAAXA,mBAAAA,CAAAA,mBAAAA,CAAAA,WAAAA,EACD,CACD,MAAO,kBACLA,CAAAA,WAAW,CAAXA,mBAAAA,CAAAA,mBAAAA,CADF,WACEA,CADK,EAAP,CAVO,CAAA,CAYN,CAAA,OAAA,CAZHF,QAYG,CAZM,CAATA,CAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]},"metadata":{},"sourceType":"module"}